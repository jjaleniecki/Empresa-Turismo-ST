SimpleButtonMorph subclass: #BotonAccion	instanceVariableNames: 'mouseAction'	classVariableNames: ''	package: 'TpFinal'!!BotonAccion methodsFor: 'initialization' stamp: 'swlaptop 12/15/2023 16:18'!initialize super initialize.! !!BotonAccion methodsFor: 'mouse events' stamp: 'swlaptop 12/14/2023 23:44'!mouseAction: unBloque	"Se guarda el parametro unBloque (que indica la accion a ejecutar) en mouseAction"	^ mouseAction := unBloque! !!BotonAccion methodsFor: 'mouse events' stamp: 'swlaptop 12/17/2023 03:33'!mouseUp: unEvento	"Cuando hay un click, se le envia el mensaje value a mouseAction para que se ejecute la accion almacenada"super mouseUp: unEvento.	mouseAction value! !Object subclass: #Cliente	instanceVariableNames: 'apellido dni ciudad contacto contratos preferencias proxVencimiento'	classVariableNames: ''	package: 'TpFinal'!!Cliente methodsFor: 'equality' stamp: 'swlaptop 12/15/2023 00:08'!esIgual: dniCliente	"Retorna true si el dniCliente es igual a self dni"	^ dniCliente = dni! !!Cliente methodsFor: 'add-remove' stamp: 'swlaptop 12/16/2023 02:53'!agregarContrato: unContrato	"Agrega unContrato a la coleccion de contratos y avisa que ha cambiado a sus dependientes"	contratos add: unContrato.	self changed! !!Cliente methodsFor: 'verification' stamp: 'Jere 12/21/2023 16:02'!esFrecuente	^false! !!Cliente methodsFor: 'verification' stamp: 'swlaptop 12/15/2023 01:59'!verificarVencimiento"Metodo que verifica si el cliente tiene algun contrato proximo a vencer"	| vencimientoProximo contrato |	vencimientoProximo := false.	contrato := contratos		            detect: [ :cont | cont vencePronto ]		            ifNone: [ nil ].	contrato ifNotNil: [ vencimientoProximo := true ].	^ vencimientoProximo! !!Cliente methodsFor: 'do-its' stamp: 'swlaptop 12/21/2023 19:20'!registrarCancelacion: nroContrato	"Si encuentra el contrato con nroContrato, realiza el reembolso y lo retorna. Caso contrario, retorna 0"	| cont reembolso elViaje cantPersonas fechaViaje |	reembolso := 0.	cont := contratos		        detect: [ :c | c esContrato: nroContrato ]		        ifNone: [ nil ].	cont ifNotNil: [		contratos remove: cont.		reembolso := cont cancelarContrato.		elViaje := cont getViaje.		cantPersonas := cont getCantPersonas.		fechaViaje := cont getFechaSeleccionada.		elViaje esViajeOrganizado			ifTrue: [ elViaje aumentarCupo: cantPersonas con: fechaViaje ]			ifFalse: [ elViaje aumentarCupo: cantPersonas ].		self changed ].	^ reembolso! !!Cliente methodsFor: 'do-its' stamp: 'swlaptop 12/15/2023 01:55'!registrarEfectivizacion: nroContrato"Metodo que si encuentra el contrato con nroContrato, realiza la efectivizacion"	| unContrato efectivizo |	efectivizo := false.	unContrato := contratos detect: [ :cont |		              cont esContrato: nroContrato ].	unContrato ifNotNil: [		unContrato efectivizarContrato.		efectivizo := true ].	^ efectivizo! !!Cliente methodsFor: 'do-its' stamp: 'swlaptop 12/17/2023 04:32'!hacerPago: cantidadCuotas con: numeroContrato	"Metodo que realiza el pago de cantidadCuotas en el contrato con numeroContrato, si el pago es realizado, se indica que ha cambiado a los dependientes"	| pagado unContrato cantCuotasPagar |	pagado := false.	unContrato := contratos		              detect: [ :cadaContrato |		              cadaContrato esIgual: numeroContrato ]		              ifNone: [ nil ].	unContrato ifNotNil: [		pagado := true.		cantCuotasPagar := unContrato hacerPago: cantidadCuotas.		proxVencimiento := cantCuotasPagar > 0			                   ifTrue: [			                   proxVencimiento + (30 * cantidadCuotas) days ]			                   ifFalse: [ nil ] ].	pagado ifTrue: [ self changed ].	^ pagado! !!Cliente methodsFor: 'do-its' stamp: 'swlaptop 12/15/2023 01:55'!registrarModificacion: nroContrato paraFecha: nuevaFecha"Metodo que intenta modificar la fecha del nroContrato"	| cont pudo |	pudo := false.	cont := contratos		        detect: [ :c | c esContrato: nroContrato ]		        ifNone: [ nil ].	cont ifNotNil: [ pudo := cont modificarContrato: nuevaFecha ].	^ pudo! !!Cliente methodsFor: 'as yet unclassified' stamp: 'Jere 12/21/2023 16:13'!getPreferencias	^preferencias! !!Cliente methodsFor: 'as yet unclassified' stamp: 'Jere 12/21/2023 16:13'!getContacto	^contacto! !!Cliente methodsFor: 'as yet unclassified' stamp: 'swlaptop 12/21/2023 20:28'!eliminarContratos	| unContrato |	unContrato := contratos at: 1.	unContrato ifNotNil: [		Transcript show: 'Contrato encontrado'.		Transcript show: unContrato toString.		unContrato changed ]! !!Cliente methodsFor: 'as yet unclassified' stamp: 'Jere 12/21/2023 16:13'!getCiudad	^ciudad! !!Cliente methodsFor: 'as yet unclassified' stamp: 'Jere 12/21/2023 16:13'!getContratos	^contratos! !!Cliente methodsFor: 'as yet unclassified' stamp: 'Jere 12/21/2023 16:13'!getProxVencimiento	^proxVencimiento! !!Cliente methodsFor: 'creation' stamp: 'Jere 12/21/2023 16:22'!generarContrato: numero con: unViaje con: fechaViaje con: personas con: cuotasT con: cuotasP con: excursiones	"Metodo que crea un contrato y lo agrega a la coleccion de contratos"	| unContrato frecuente|	unContrato := Contrato		              crear: numero		              con: unViaje		              con: fechaViaje		              con: personas		              con: cuotasT		              con: cuotasP		              con: excursiones.	unViaje esViajeOrganizado		ifTrue: [ unViaje disminuirCupo: personas con: fechaViaje ]		ifFalse: [ unViaje disminuirCupo: personas ].		(unViaje esViajeOrganizado and: self esFrecuente not) ifTrue:[frecuente := ViajeroFrecuente new. frecuente inicializarDesdeCliente: self. self become: frecuente. ].	self agregarContrato: unContrato.	self changed.	^ unContrato! !!Cliente methodsFor: 'creation' stamp: 'swlaptop 12/19/2023 23:38'!generarContratoFlexible: numero con: unViaje con: fechaViaje con: personas con: cuotasT con: cuotasP con: colExcursiones con: valorPlus	| unContrato |	unContrato := ContratoFlexible		              crear: numero		              con: unViaje		              con: fechaViaje		              con: personas		              con: cuotasT		              con: cuotasP		              con: colExcursiones		              con: valorPlus.	unViaje esViajeOrganizado		ifTrue: [ unViaje disminuirCupo: personas con: fechaViaje ]		ifFalse: [ unViaje disminuirCupo: personas ].	self agregarContrato: unContrato.	self changed.	^ unContrato! !!Cliente methodsFor: 'finding/searching' stamp: 'swlaptop 12/15/2023 01:50'!obtenerContrato: nroContrato	"Retorna el contrato correspondiente a nroContrato, sino existe retorna nil"	| unContrato |	unContrato := nil.	unContrato := contratos detect: [ :cont |		              cont verificarNroContrato: nroContrato ].	^ unContrato! !!Cliente methodsFor: 'initialization' stamp: 'swlaptop 12/17/2023 04:33'!inicializar: apell con: documento con: ciud con: telefono con: colContratos con: pref	"Inicializa los valores de Cliente"	apellido := apell.	dni := documento.	ciudad := ciud.	contacto := telefono.	contratos := colContratos.	preferencias := pref.	proxVencimiento:= Date today.! !!Cliente methodsFor: 'initialization' stamp: 'swlaptop 12/14/2023 23:47'!esIgualDni: unDni"Retorna true si los dni son iguales"	^ dni = unDni! !!Cliente methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 01:57'!setContacto: unContacto"Modifica el contacto"	contacto := unContacto.	self changed.! !!Cliente methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 01:51'!getDni	"Retorna el DNI"	^ dni! !!Cliente methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 01:50'!obtenerContratos"Retorna la coleccion de contratos"	^ contratos! !!Cliente methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 01:56'!setApellido: unApellido"Modifica el apellido"	apellido := unApellido.	self changed.! !!Cliente methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 01:56'!setCiudad: unaCiudad"Modifica la ciudad"	ciudad := unaCiudad.	self changed.! !!Cliente methodsFor: 'set and get' stamp: 'swlaptop 12/16/2023 02:33'!getCantContratos ^contratos size.! !!Cliente methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 01:57'!setPreferencias: pref"Modifica las preferencias"	preferencias := pref.	self changed.! !!Cliente methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 01:51'!getApellido	"Retorna el apellido"	^ apellido! !!Cliente methodsFor: 'printing' stamp: 'Jere 12/15/2023 12:01'!stringContratos"Metodo que retorna los contratos del cliente"	| cadena |	contratos do: [ :cont | cadena := cont toString , (String with: Character cr) ].	^ contratos! !!Cliente methodsFor: 'printing' stamp: 'swlaptop 12/17/2023 15:53'!toString	"Retorna los datos del cliente en una cadena"	| st |	st := Character cr asString, 'DNI: ' , dni asString , Character cr asString , 'Apellido: '	      , apellido , Character cr asString , 'Ciudad: ' , ciudad	      , Character cr asString , 'Contacto: ' , contacto asString	      , Character cr asString.	^ st! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cliente class	instanceVariableNames: ''!!Cliente class methodsFor: 'constructor' stamp: 'Jere 4/17/2023 18:54'!crearDni: unDni conNombre: nom conApellido: ape	|cliente|	cliente := self new.	cliente inicializarDni: unDni conNombre: nom conApellido: ape.	^cliente.! !!Cliente class methodsFor: 'constructor' stamp: 'vale 7/28/2023 15:41'!crear: apell con: documento con: ciud con: telefono con: colContratos con: pref	|personita|	personita:= self new.	personita inicializar: apell con: documento con: ciud con: telefono con: colContratos con: pref.	^personita.! !Object subclass: #Contrato	instanceVariableNames: 'nroContrato fechaContrato unViaje fechaSeleccionada cantPersonas cantCuotasTotales cantCuotasPagar excursionesCont precioTotal'	classVariableNames: ''	package: 'TpFinal'!!Contrato methodsFor: 'initialization' stamp: 'swlaptop 12/15/2023 02:45'!inicializar: nro con: viaje con: salida con: personas con: cuotasTotales con: cuotasPagar con: excursiones	"Metodo que inicializa un contrato con todos sus atributos y calcula el precio total "	nroContrato := nro.	fechaContrato := Date today.	unViaje := viaje.	fechaSeleccionada := salida.	cantPersonas := personas.	cantCuotasTotales := cuotasTotales.	cantCuotasPagar := cuotasPagar.	excursionesCont := excursiones.	precioTotal := cuotasTotales * unViaje getCostoPersona * cantPersonas! !!Contrato methodsFor: 'printing' stamp: 'swlaptop 12/17/2023 16:26'!toString	"Metodo que retorna una cadena con todos los atributos de contrato"	| st |	st := Character cr asString , 'Nro de contrato: '	      , nroContrato asString , Character cr asString	      , 'Fecha del Contrato: ' , fechaContrato ddmmyyyy	      , Character cr asString , 'Viaje: ' , unViaje getNombre	      , Character cr asString , 'Fecha seleccionada: '	      , fechaSeleccionada asString , Character cr asString	      , 'Cantidad de personas: ' , cantPersonas asString	      , Character cr asString , 'Cantidad de cuotas totales: '	      , cantCuotasTotales asString , Character cr asString	      , 'Cantidad de cuotas pagar: ' , cantCuotasPagar asString	      , Character cr asString.	^ st! !!Contrato methodsFor: 'equality' stamp: 'swlaptop 12/15/2023 02:39'!esIgual: numeroContrato"Metodo que verifica si dos contratos son iguales, comparando sus nros"	^ nroContrato = numeroContrato! !!Contrato methodsFor: 'add/remove' stamp: 'IgnacioMendiberri 12/20/2023 19:27'!agregarExcursion: numExcursion conCant: cantExcursion	| cond exc excCont |	cond := false.	(exc := unViaje buscarExcursion: numExcursion) ifNotNil: [				(self existeExcursion: numExcursion) ifFalse:[						(cantExcursion <= cantPersonas and: (fechaSeleccionada asDateAndTime - Date today) days >= 7) ifTrue: [						cond := unViaje esViajeOrganizado ].						cond ifTrue: [								excCont := ExcursionContrato new crear: exc con: cantExcursion.								excursionesCont add: excCont.								self agregarPrecio: excCont.								self changed 						]				]	].	^ cond! !!Contrato methodsFor: 'add/remove' stamp: 'swlaptop 12/15/2023 02:08'!agregarPrecio: excursion conCant: cantExcursion	"Metodo que agrega el precio correspondiente a la excursion y la cantidad de personas que la realizan. Ademas avisa a sus dependientes que ha cambiado"	| precio |	precio := excursion getCostoPersona.	precioTotal := precioTotal + (precio * cantExcursion).	self changed! !!Contrato methodsFor: 'add/remove' stamp: 'IgnacioMendiberri 12/15/2023 17:47'!agregarPrecio: excursion	"Metodo que agrega el precio correspondiente a la excursion y la cantidad de personas que la realizan. Ademas avisa a sus dependientes que ha cambiado"	| precio |	precio := (excursion getExcursion) getCostoPorPersonaExc.	precioTotal := precioTotal + (precio * excursion getCantPersonas).	self changed! !!Contrato methodsFor: 'verification' stamp: 'swlaptop 12/15/2023 02:46'!verificarNroContrato: nro"Metodo que verifica si un nro de contrato es igual a otro"	^ nro = nroContrato! !!Contrato methodsFor: 'verification' stamp: 'swlaptop 12/15/2023 02:38'!esContrato: nroCont"Metodo que verifica si el nroCont es igual a self nroContrato"	^ nroCont == nroContrato! !!Contrato methodsFor: 'verification' stamp: 'Jere 12/16/2023 17:48'!vencePronto"Metodo que verifica si el contrato esta proximo a vencer"	| fechaVencimiento vencePronto dateSeleccionada|	dateSeleccionada := Date readFrom: fechaSeleccionada readStream.	vencePronto := false.	fechaVencimiento := Date today addDays: 14.	dateSeleccionada <= fechaVencimiento ifTrue: [ vencePronto := true ].	^ vencePronto! !!Contrato methodsFor: 'modifying' stamp: 'swlaptop 12/15/2023 02:45'!modificarContrato: nuevaFecha"Metodo que retorna falso porque no se puede modificar la fecha de un contrato si no es flexible"	^ false! !!Contrato methodsFor: 'as yet unclassified' stamp: 'IgnacioMendiberri 12/20/2023 19:41'!existeExcursion: numExc	|existe|	existe := (excursionesCont select: [:exc | (exc getExcursion) verificarExcursion: numExc ]) isNotNil.	^existe 	! !!Contrato methodsFor: 'do-its' stamp: 'swlaptop 12/17/2023 04:19'!hacerPago: cantidadCuotas	"Metodo que realiza el pago de una cantidadCuotas y avisa a sus dependientes"	cantCuotasPagar := cantCuotasPagar - cantidadCuotas.	self changed.	^ cantCuotasPagar! !!Contrato methodsFor: 'do-its' stamp: 'swlaptop 12/15/2023 02:38'!efectivizarContrato"Metodo que efectiviza un contrato y avisa a sus dependientes que ha cambiado"	cantCuotasPagar := 0.	self changed.! !!Contrato methodsFor: 'do-its' stamp: 'IgnacioMendiberri 12/21/2023 13:53'!cancelarContrato	"Metodo que calcula el reembolso al dar de baja un contrato"	| costoTotal reembolso diasDist |	reembolso := 0.	diasDist := (fechaSeleccionada asDateAndTime - Date today) days.	costoTotal := unViaje getCostoPersona * cantPersonas.	diasDist >= 90 ifTrue: [ reembolso := costoTotal * 75 / 100 ].	diasDist < 90 & (diasDist > 60) ifTrue: [		reembolso := costoTotal * 50 / 100 ].	(diasDist between: 0 and: 60) ifTrue: [		reembolso := costoTotal * 25 / 100 ].		self changed.	^ reembolso! !!Contrato methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 02:39'!getFechaContrato"Retorna la fecha del contrato"	^ fechaContrato! !!Contrato methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 02:39'!getCantPersonas"Retorna la cantidad de personas"	^ cantPersonas! !!Contrato methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 02:40'!getPrecio"Retorna el precio"	^ precioTotal! !!Contrato methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 02:39'!getNroContrato"Retorna el numero del contrato"	^ nroContrato! !!Contrato methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 02:39'!getFechaSeleccionada"Retorna la fecha seleccionada"	^ fechaSeleccionada! !!Contrato methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 02:40'!getViaje"Retorna el viaje"	^ unViaje! !!Contrato methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 02:40'!getNroCuotasAPagar"Retorna la cantidad de cuotas a pagar"	^ cantCuotasPagar! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Contrato class	instanceVariableNames: ''!!Contrato class methodsFor: 'constructor' stamp: 'swlaptop 12/13/2023 20:57'!crear: nro con: viaje con: salida con: personas con: cuotasTotales con: cuotasPagar con: excursiones	| contratito |	contratito := self new.	contratito		inicializar: nro		con: viaje		con: salida		con: personas		con: cuotasTotales		con: cuotasPagar		con: excursiones.	^ contratito! !Contrato subclass: #ContratoFlexible	instanceVariableNames: 'valorPlus'	classVariableNames: ''	package: 'TpFinal'!!ContratoFlexible methodsFor: 'initialization' stamp: 'swlaptop 12/15/2023 02:48'!inicializar: plus"Metodo que inicializa los atributos propios de ContratoFlexible"	valorPlus := plus! !!ContratoFlexible methodsFor: 'modifying' stamp: 'swlaptop 12/18/2023 04:05'!modificarContrato: nuevaFecha	"Metodo que verifica, si esta la nuevaFecha disponible, la modifica y avisa a sus dependientes"	| disponible |	disponible := unViaje		              fechaDisponible: nuevaFecha		              con: cantPersonas.	disponible ifTrue: [		fechaSeleccionada := nuevaFecha.		self changed ].	^ disponible! !!ContratoFlexible methodsFor: 'printing' stamp: 'swlaptop 12/15/2023 02:50'!toString"Metodo que llama a super toString y concatena los atributos de ContratoFlexible"	^ super toString , ', valorPlus' , valorPlus asString! !!ContratoFlexible methodsFor: 'as yet unclassified' stamp: 'IgnacioMendiberri 12/21/2023 14:38'!getValorPlus	^valorPlus ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ContratoFlexible class	instanceVariableNames: ''!!ContratoFlexible class methodsFor: 'constructor' stamp: 'swlaptop 12/15/2023 02:47'!crear: nro con: viaje con: salida con: personas con: cuotasTotales con: cuotasPagar con: excursionesCont con: plus	| contratito |	contratito := self		              crear: nro		              con: viaje		              con: salida		              con: personas		              con: cuotasTotales		              con: cuotasPagar		              con: excursionesCont.		contratito inicializar: plus.	^ contratito! !Object subclass: #EmpresaTurismo	instanceVariableNames: 'clientes viajes'	classVariableNames: ''	package: 'TpFinal'!!EmpresaTurismo methodsFor: 'initialization' stamp: 'swlaptop 12/15/2023 02:59'!inicializar: colClientes con: colViajes"Metodo que inicializa las colecciones"	clientes := colClientes.	viajes := colViajes! !!EmpresaTurismo methodsFor: 'printing' stamp: 'swlaptop 12/15/2023 03:03'!toString"Metodo que realiza muestra toda la informacion de la empresa en una cadena"	| viajess clientess |	viajess := viajes do: [ :vi | vi toString , ', ' ].	clientess := clientes do: [ :cli | cli toString , ', ' ].	^ viajess , clientess! !!EmpresaTurismo methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 03:00'!obtenerClientes"Retorna la coleccion de clientes"	^ clientes! !!EmpresaTurismo methodsFor: 'set and get' stamp: 'Jere 12/15/2023 11:29'!obtenerContratos"Retorna un string con los contratos del cliente"	| contratos listaContratos |	listaContratos := OrderedCollection new.	clientes do: [ :cli |		contratos := cli obtenerContratos.		contratos do: [ :cont | listaContratos add: cont ] ].	^ listaContratos! !!EmpresaTurismo methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 03:01'!obtenerViajes"Retorna la coleccion de viajes"	^ viajes! !!EmpresaTurismo methodsFor: 'set and get' stamp: 'swlaptop 12/16/2023 02:29'!getCantClientes	^clientes size.! !!EmpresaTurismo methodsFor: 'set and get' stamp: 'swlaptop 12/18/2023 11:24'!getCantContratos	| cant |	cant := 0.	clientes ifNotNil: [		clientes do: [ :cli | cant := cant + cli getCantContratos ] ].	^ cant! !!EmpresaTurismo methodsFor: 'set and get' stamp: 'swlaptop 12/16/2023 02:31'!getCantViajes^viajes size.! !!EmpresaTurismo methodsFor: 'ui requests' stamp: 'swlaptop 12/15/2023 03:04'!verViajesDisponibles"Metodo que pide el rango de fechas y llama al metodo con esas fechas"	| fecha1 fecha2 |	fecha1 := UIManager default request: 'Ingrese la primer fecha'.	fecha2 := UIManager default request: 'Ingrese la segunda fecha'.	self verViajesDisponibles: fecha1 otraFecha: fecha2! !!EmpresaTurismo methodsFor: 'finding/searching' stamp: 'swlaptop 12/15/2023 03:01'!obtenerViaje: nombreViaje con: fechaViaje con: personas"Retorna una instancia de Viaje con nombreViaje fechaViaje y personas"	| unViaje |	unViaje := viajes		           detect: [ :cadaViaje |			           cadaViaje				           viajeDisponible: nombreViaje				           con: fechaViaje				           con: personas ]		           ifNone: [ nil ].	^ unViaje! !!EmpresaTurismo methodsFor: 'finding/searching' stamp: 'swlaptop 12/17/2023 04:22'!obtenerCliente: dniCliente	"Retorna unCliente con dniCliente"	| unCliente |	unCliente := clientes		             detect: [ :cadaCliente |		             cadaCliente esIgual: dniCliente ]		             ifNone: [ nil ].	^ unCliente! !!EmpresaTurismo methodsFor: 'add/remove' stamp: 'IgnacioMendiberri 12/20/2023 18:46'!agregarExcursionContrato: numExcursion conCant: cantExcursion conNroContrato: nroContr	"Metodo que agrega una excursion al contrato de un cliente"	| cliente unCont |	cliente := nil.	unCont := nil.	cliente := clientes detect: [ :cl | (unCont := cl obtenerContrato: nroContr) isNotNil ].	unCont ifNotNil: [ unCont agregarExcursion: numExcursion conCant: cantExcursion ]! !!EmpresaTurismo methodsFor: 'add/remove' stamp: 'swlaptop 12/20/2023 23:37'!agregarExcursionViaje: excursion conNombreViaje: nombreViaje	"Metodo que agrega una excursion a un viaje"	| unViaje unaExc agregado |	agregado:= false.	unViaje := viajes		           detect: [ :via | via viajeDisponible: nombreViaje ]		           ifNone: [ nil ].	unViaje ifNotNil: [		unaExc := unViaje buscarExcursion: excursion getNroExcursion.		unaExc ifNil: [ unViaje agregarExcursion: excursion. agregado:= true ] ].	^agregado! !!EmpresaTurismo methodsFor: 'add/remove' stamp: 'swlaptop 12/21/2023 20:27'!eliminarCliente: dni	"Metodo que dado un dni, elimina a un cliente de la coleccion de clientes y avisa a sus dependientes"	| eliminado cliente |	eliminado := false.	cliente := self obtenerCliente: dni.	cliente ifNotNil: [		clientes remove: cliente.		cliente eliminarContratos .		eliminado := true.		self changed.		cliente changed].	^ eliminado! !!EmpresaTurismo methodsFor: 'add/remove' stamp: 'swlaptop 12/19/2023 23:42'!eliminarViaje: nombreViaje con: fecha con: personas	"Metodo que dado el nombre de un viaje, la fecha y la cantidad de personas, lo elimina y avisa a sus dependientes"	| eliminado unViaje |	unViaje := self obtenerViaje: nombreViaje con: fecha con: personas.	eliminado := false.	unViaje ifNotNil: [		viajes remove: unViaje.		eliminado := true.		self changed.		unViaje changed ].	^ eliminado! !!EmpresaTurismo methodsFor: 'add/remove' stamp: 'swlaptop 12/18/2023 11:15'!agregarCliente: unCliente	"Metodo que agrega un cliente a la coleccion de clientes si el mismo no existe ya. Si es agregado, avisa a sus dependientes"	| agregado existeCliente |	agregado := false.	existeCliente := clientes		                 detect: [ :cadaCli | cadaCli esIgual: unCliente ]		                 ifNone: [ nil ].	existeCliente ifNil: [		clientes add: unCliente.		agregado := true.		self changed.		unCliente changed ].	^ agregado! !!EmpresaTurismo methodsFor: 'add/remove' stamp: 'swlaptop 12/17/2023 16:30'!eliminarViaje: unViaje	"Metodo que dado unViaje, lo elimina de la coleccion de viajes y avisa a sus dependientes"	| eliminado existeViaje |	eliminado := false.	existeViaje := viajes		               detect: [ :cadaViaje | cadaViaje esIgual: unViaje ]		               ifNone: [ nil ].	unViaje ifNotNil: [		viajes remove: unViaje.		eliminado := true.		self changed.		unViaje changed ].	^ eliminado! !!EmpresaTurismo methodsFor: 'add/remove' stamp: 'swlaptop 12/15/2023 02:51'!agregarContrato: unContrato aCliente: dniCli"Metodo que obtiene el cliente con dniCli y, si lo encuentra, le agrega el contrato unContrato"	| cli |	cli := clientes detect: [ :c | c esIgual: dniCli ] ifNone: [ nil ].	cli ifNotNil: [ cli agregarContrato: unContrato ]! !!EmpresaTurismo methodsFor: 'add/remove' stamp: 'swlaptop 12/18/2023 00:09'!agregarViaje: unViaje	"Metodo que agrega unViaje a la coleccion de viajes y avisa a sus dependientes"	| agregado existeViaje |	agregado := false.	existeViaje := viajes		               detect: [ :cadaViaje | cadaViaje esIgual: unViaje ]		               ifNone: [ nil ].	existeViaje ifNil: [		viajes add: unViaje.		agregado := true.		self changed.		unViaje changed ].	^ agregado! !!EmpresaTurismo methodsFor: 'creation' stamp: 'swlaptop 12/18/2023 11:39'!generarContratoFlexible: numero con: dniCliente con: nombreViaje con: fechaViaje con: personas con: cuotasT con: valorPlus	"Metodo que genera un contrato"	| contratito unCliente unViaje colExcursiones cuotasP |	unCliente := self obtenerCliente: dniCliente.	unViaje := self		           obtenerViaje: nombreViaje		           con: fechaViaje		           con: personas.	unCliente notNil & unViaje notNil ifTrue: [		colExcursiones := OrderedCollection new.		cuotasP := cuotasT.		contratito := unCliente			              generarContratoFlexible: numero			              con: unViaje			              con: fechaViaje			              con: personas			              con: cuotasT						              con: cuotasP			              con: colExcursiones			              con: valorPlus ].		contratito ifNotNil: [ self changed ].	^ contratito! !!EmpresaTurismo methodsFor: 'creation' stamp: 'IgnacioMendiberri 12/21/2023 14:03'!generarContrato: numero con: dniCliente con: nombreViaje con: fechaViaje con: personas con: cuotasT	"Metodo que genera un contrato"	| contratito unCliente unViaje colExcursiones cuotasP |	contratito := nil.	unCliente := self obtenerCliente: dniCliente.	unViaje := self		           obtenerViaje: nombreViaje		           con: fechaViaje		           con: personas.	unCliente notNil & unViaje notNil ifTrue: [		colExcursiones := OrderedCollection new.		cuotasP := cuotasT.		contratito := unCliente			              generarContrato: numero			              con: unViaje			              con: fechaViaje			              con: personas			              con: cuotasT			              con: cuotasP			              con: colExcursiones ].	contratito ifNotNil: [self changed ].	^ contratito! !!EmpresaTurismo methodsFor: 'do-its' stamp: 'swlaptop 12/15/2023 03:03'!registrarEfectivizacion: nroContrato	"Metodo que registra la efectivizacion de un contrato con nroContrato"	clientes detect: [ :cli | cli registrarEfectivizacion: nroContrato ]! !!EmpresaTurismo methodsFor: 'do-its' stamp: 'swlaptop 12/15/2023 03:01'!realizarPago: cantidadCuotas con: numeroContrato"Metodo que realiza el pago de cantidadCuotas del contrato con numeroContrato"	| exito |	exito := false.	clientes		detect: [ :cadaCliente |			cadaCliente hacerPago: cantidadCuotas con: numeroContrato ]		ifNone: [ nil ].	clientes ifNotNil: [ exito := true ].	^ exito! !!EmpresaTurismo methodsFor: 'do-its' stamp: 'IgnacioMendiberri 12/21/2023 14:13'!registrarCancelacion: nroContrato	"Metodo que registra la cancelacion de un contrato con nroContrato"	| reembolso |	reembolso := 0.	clientes detect: [ :cli | ((reembolso:= cli registrarCancelacion: nroContrato)>0) or: (reembolso = -1) ].	^ reembolso! !!EmpresaTurismo methodsFor: 'do-its' stamp: 'Jere 12/16/2023 17:40'!verViajesDisponibles: fecha1 otraFecha: fecha2"Metodo que dado un rango de fechas, devuelve una lista con los viajes disponibles en el mismo"	| listaViajes |	listaViajes := OrderedCollection new.	listaViajes := viajes select: [ :viaje |		               viaje verificarFecha: fecha1 regreso: fecha2 ].	^ listaViajes! !!EmpresaTurismo methodsFor: 'do-its' stamp: 'swlaptop 12/15/2023 03:03'!registrarModificacion: nroCont paraFecha: nuevaFecha"Metodo que registra la modificacion de un contrato con nroCont"	| pudo |	pudo := false.	clientes do: [ :cli |		pudo := cli registrarModificacion: nroCont paraFecha: nuevaFecha ].	^ pudo! !!EmpresaTurismo methodsFor: 'notification' stamp: 'swlaptop 12/15/2023 03:00'!notificarVencimiento"Metodo que retorna una coleccion de los clientes que tienen al menos un contrato proximo a vencer"	| colClientesProxVencer |	colClientesProxVencer := OrderedCollection new.	colClientesProxVencer := clientes select: [ :cadaCli |		                         cadaCli verificarVencimiento ].	^ colClientesProxVencer! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EmpresaTurismo class	instanceVariableNames: ''!!EmpresaTurismo class methodsFor: 'constructor' stamp: 'vale 7/28/2023 14:44'!crear: colClientes con: colViajes	|empresita|	empresita:= self new.	empresita inicializar: colClientes con: colViajes.	^empresita.! !!EmpresaTurismo class methodsFor: 'constructor' stamp: 'swlaptop 12/12/2023 00:02'!crear	| empresita colClientes colViajes|	empresita := self new.	colViajes := OrderedCollection new.	colClientes := OrderedCollection new.	empresita inicializar: colClientes con: colViajes.	^ empresita! !Object subclass: #Etapa	instanceVariableNames: 'nroEtapa diaLlegada cantDias hotel tipoPension actividades'	classVariableNames: ''	package: 'TpFinal'!!Etapa methodsFor: 'printing' stamp: 'swlaptop 12/15/2023 03:05'!toString"Metodo que retorna una cadena con los atributos de etapa"	^ 'dia de llegada: ' , diaLlegada asString , ', cantidad de dias: '	  , cantDias asString , ', Hotel: ' , hotel asString	  , ', tipo de pension: ' , tipoPension asString , ', actividades: '	  , actividades asString! !!Etapa methodsFor: 'set and get' stamp: 'IgnacioMendiberri 12/15/2023 19:09'!getNroEtapa	^nroEtapa ! !!Etapa methodsFor: 'initialization' stamp: 'IgnacioMendiberri 12/15/2023 19:07'!inicializar:nro con: llegada con: dias con: estadia con: tipo con: activ"Metodo que inicializa los atributos de etapa"	nroEtapa := nro .	diaLlegada := llegada.	cantDias := dias.	hotel := estadia.	tipoPension := tipo.	actividades := activ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Etapa class	instanceVariableNames: ''!!Etapa class methodsFor: 'constructor' stamp: 'IgnacioMendiberri 12/15/2023 19:08'!crear:nro con: llegada con: dias con: estadia con: tipo con: activ	|etapita|	etapita:= self new.	etapita inicializar: nro con:llegada con: dias con: estadia con: tipo con: activ.	^etapita! !Object subclass: #Excursion	instanceVariableNames: 'nroExcursion nombreExcursion descripcionExcursion costoPersonaExcursion'	classVariableNames: ''	package: 'TpFinal'!!Excursion methodsFor: 'verification' stamp: 'Jere 12/8/2023 14:30'!verificarExcursion: numExcursion	^nroExcursion=numExcursion.! !!Excursion methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 12:46'!getDescripcionExcrusion	^descripcionExcursion! !!Excursion methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 12:46'!getNroExcursion	^nroExcursion! !!Excursion methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 12:46'!getCostoPorPersonaExc	^costoPersonaExcursion! !!Excursion methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 12:46'!getNombreExcursion	^nombreExcursion! !!Excursion methodsFor: 'initialization' stamp: 'swlaptop 12/16/2023 01:22'!inicializar: nroExc con: nombreExc con: desc con: costXPer	nroExcursion := nroExc.	nombreExcursion := nombreExc.	descripcionExcursion := desc.	costoPersonaExcursion := costXPer! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Excursion class	instanceVariableNames: ''!!Excursion class methodsFor: 'constructor' stamp: 'swlaptop 12/16/2023 01:23'!crear: nroExc con: nomExc con: descExc con: costXper	| nuevaExc |	nuevaExc := self new.	nuevaExc		inicializar: nroExc		con: nomExc		con: descExc		con: costXper.	^ nuevaExc! !Object subclass: #ExcursionContrato	instanceVariableNames: 'unaExcusion cantPersonas'	classVariableNames: ''	package: 'TpFinal'!!ExcursionContrato methodsFor: 'initialization' stamp: 'swlaptop 12/16/2023 01:20'!inicializar: unaExc con: cantPer	unaExcusion := unaExc.	cantPersonas := cantPer! !!ExcursionContrato methodsFor: 'set and get' stamp: 'IgnacioMendiberri 12/15/2023 17:27'!getCantPersonas 	^cantPersonas ! !!ExcursionContrato methodsFor: 'set and get' stamp: 'IgnacioMendiberri 12/15/2023 17:27'!getExcursion	^unaExcusion ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ExcursionContrato class	instanceVariableNames: ''!!ExcursionContrato class methodsFor: 'constructor' stamp: 'swlaptop 12/16/2023 01:20'!crear: unaExc con: cantPer	| nuevaExcCont |	nuevaExcCont := self new.	nuevaExcCont inicializar: unaExc con: cantPer.	^ nuevaExcCont! !Object subclass: #FechaSalida	instanceVariableNames: 'fecha cupo'	classVariableNames: ''	package: 'TpFinal'!!FechaSalida methodsFor: 'verification' stamp: 'Jere 12/21/2023 15:31'!verificarFecha: fechaSalida	^(fechaSalida <= fecha and: cupo>0)! !!FechaSalida methodsFor: 'verification' stamp: 'swlaptop 12/18/2023 00:23'!fechaDisponible: unaFecha con: cantPersonas	"Metodo que verifica si una fecha esta disponible para cantPersonas"	| disponible |	disponible := unaFecha = fecha & (cantPersonas asNumber <= cupo).	^ disponible! !!FechaSalida methodsFor: 'set and get' stamp: 'swlaptop 12/19/2023 23:47'!aumentarCupo: personascupo:= cupo+personas.! !!FechaSalida methodsFor: 'set and get' stamp: 'Jere 12/20/2023 21:14'!getCupo	^cupo! !!FechaSalida methodsFor: 'set and get' stamp: 'Jere 12/16/2023 17:27'!getFecha"Retorna la fecha"	^ Date readFrom: fecha readStream.! !!FechaSalida methodsFor: 'set and get' stamp: 'swlaptop 12/18/2023 01:59'!disminuirCupo: personas	cupo := cupo - personas! !!FechaSalida methodsFor: 'initialization' stamp: 'swlaptop 12/15/2023 03:11'!inicializar: unaFecha con: unCupo	"Metodo que inicializa los atributos de FechaSalida"	fecha := unaFecha.	cupo := unCupo! !!FechaSalida methodsFor: 'printing' stamp: 'Jere 12/20/2023 21:14'!toString	"Metodo que retorna una cadena con los datos de FechaSalida"	^ fecha asString , Character cr asString , 'Cupo: '	  , cupo asString! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FechaSalida class	instanceVariableNames: ''!!FechaSalida class methodsFor: 'constructor' stamp: 'vale 7/28/2023 15:38'!crear: unaFecha con: unCupo	| fechita |	fechita := self new.	fechita inicializar: unaFecha con: unCupo.	^fechita! !BorderedMorph subclass: #TurismoVisual	instanceVariableNames: 'miEmpresita botonCerrar botonA botonB botonC titulo contratoVisual clienteVisual viajeVisual botonCargaInicial ventanaFormulario stringViajes stringClientes ventanaB ventanaC morphC'	classVariableNames: ''	package: 'TpFinal'!!TurismoVisual methodsFor: 'add/remove' stamp: 'swlaptop 12/20/2023 23:38'!agregarExcursionViaje: nroExcursion con: nombreExcursion con: descripcionExcursion con: costoPersonaExcursion con: nombreViaje|unaExcursion agregado|unaExcursion := Excursion crear: nroExcursion con: nombreExcursion con: descripcionExcursion con: costoPersonaExcursion.agregado:= miEmpresita agregarExcursionViaje: unaExcursion conNombreViaje: nombreViaje.self accionRealizada: agregado.! !!TurismoVisual methodsFor: 'ui - requests' stamp: 'swlaptop 12/14/2023 23:35'!pedirModificacion 	self subclassResponsibility! !!TurismoVisual methodsFor: 'ui - requests' stamp: 'swlaptop 12/14/2023 23:35'!pedirBaja	self subclassResponsibility! !!TurismoVisual methodsFor: 'ui - requests' stamp: 'Jere 12/21/2023 15:38'!pedirFechas	"Metodo que pide al usuario dos fechas, llama al metodo verViajesDisponibles de empresaTurismo e imprime la lista retornada"	| fecha1 fecha2 listaViajes viajes bCerrar morphB tituloVent|	fecha1 := UIManager default request:		          'Ingrese la primer fecha mm/dd/yyyy'.	fecha2 := UIManager default request:		          'Ingrese la segunda fecha mm/dd/yyyy'.	listaViajes := miEmpresita		               verViajesDisponibles: fecha1		               otraFecha: fecha2.	viajes := self listaString: listaViajes.	ventanaB := BorderedMorph new.	tituloVent := StringMorph new.	ventanaB		color: Color lightGray;		position: ventanaB topRight + (700 @ 150);		bounds: (ventanaB position extent: 600 @ 700).	bCerrar := BotonAccion new.	morphB := TextMorph new.	ventanaB		addMorph: morphB;		addMorph: tituloVent;		addMorph: bCerrar.	morphB		margins: 200 @ 100;		position: ventanaB position - (170 @ 60);		contents: viajes;		color: Color black;		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	bCerrar		position: ventanaB topRight - (35 @ 0);		label: 'x';		height: 35;		width: 35;		color: Color red;		mouseAction: [ ventanaB hide ].	tituloVent		position: ventanaB position + (30@5);		contents: 'VIAJES ENTRE ', fecha1, ' Y ', fecha2;		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 400);		color: Color black.	botonB mouseAction: [ self mostrar: ventanaB ].	ventanaB openInWorld! !!TurismoVisual methodsFor: 'ui - requests' stamp: 'swlaptop 12/14/2023 16:03'!abm	"Modulo que pide que se eliga una opcion y llama al metodo correspondiente"	| opcion |	opcion := UIManager default		          chooseFrom: #( 'alta' 'baja' 'modificacion' )		          message: 'Eliga una opcion'. "(0-cancelo 1-alta 2-baja 3-modificacion)"	opcion = 0 ifFalse: [		opcion = 1			ifTrue: [ self pedirAlta ]			ifFalse: [				opcion = 2					ifTrue: [ self pedirBaja ]					ifFalse: [						opcion = 3							ifTrue: [ self pedirModificacion ]							ifFalse: [ UIManager default inform: 'Accion cancelada' ] ] ] ]! !!TurismoVisual methodsFor: 'ui - requests' stamp: 'Jere 12/20/2023 20:32'!pedirAlta	"Metodo que crea una ventana y le agrega botones para realizar un Alta"	| bCerrar|	ventanaFormulario ifNotNil: [ventanaFormulario delete]. 	ventanaFormulario := BorderedMorph new.	ventanaFormulario		color: Color lightGray;		position: ventanaFormulario topRight + (700 @ 150);		bounds: (ventanaFormulario position extent: 700 @ 500).	bCerrar := BotonAccion new.	ventanaFormulario addMorph: bCerrar.	bCerrar		position: ventanaFormulario topRight - (35 @ 0);		label: 'x';		height: 35;		width: 35;		color: Color red;		mouseAction: [ ventanaFormulario delete ].! !!TurismoVisual methodsFor: 'ui - requests' stamp: 'swlaptop 12/15/2023 01:29'!accionRealizada: boolean	"Metodo que si el boolean es true entonces informa que se ha realizado la accion, caso contrario informa que no se ha podido realizar"	boolean ifTrue:[UIManager default inform: 'Accion realizada :)']ifFalse:[UIManager default inform:'No se ha podido completar la accion'].	! !!TurismoVisual methodsFor: 'ui - requests' stamp: 'swlaptop 12/20/2023 23:33'!pedirExcursion	| nroExcursion nombreExcursion descripcionExcursion costoPersonaExcursion botonEnviar tituloForm nombreViaje |	self pedirAlta.	nroExcursion := TextMorph new.	nombreExcursion := TextMorph new.	descripcionExcursion := TextMorph new.	costoPersonaExcursion := TextMorph new.	nombreViaje := TextMorph new.	botonEnviar := BotonAccion new.	tituloForm := StringMorph new.	ventanaFormulario		addMorph: nroExcursion;		addMorph: nombreExcursion;		addMorph: nombreViaje;		addMorph: descripcionExcursion;		addMorph: costoPersonaExcursion;		addMorph: botonEnviar;		addMorph: tituloForm.	botonEnviar		position: ventanaFormulario bottomRight - (100 @ 60);		label: 'Enviar';		mouseAction: [			self				agregarExcursionViaje: nroExcursion text asNumber				con: nombreExcursion text asString				con: descripcionExcursion text asString				con: costoPersonaExcursion text asNumber				con: nombreViaje text  asString ].	nombreViaje		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 270);		contents: 'Ingrese aqui el NOMBRE del viaje';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	costoPersonaExcursion		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 200);		contents: 'Ingrese aqui el COSTO POR PERSONA';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	descripcionExcursion		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 140);		contents: 'Ingrese aqui la DESCRIPCION';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	nombreExcursion		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 70);		contents: 'Ingrese aqui el NOMBRE';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	nroExcursion		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0);		contents: 'Ingrese aqui el NUMERO';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	tituloForm		position: ventanaFormulario position + (225 @ 5);		contents: 'NUEVA EXCURSION';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 400);		color: Color black.	ventanaFormulario openInWorld! !!TurismoVisual methodsFor: 'printing' stamp: 'swlaptop 12/20/2023 22:31'!listaString: lista	"Metodo que dada una lista, retorna un string del contenido de la misma"	| cadena |	cadena := ''.	lista do: [ :elem |		cadena := cadena , elem toString 		          , Character cr asString ].	^ cadena! !!TurismoVisual methodsFor: 'visualizacionVentana' stamp: 'swlaptop 12/14/2023 16:08'!mostrar: unaVentana"Muestra unaVentana"unaVentana show.! !!TurismoVisual methodsFor: 'visualizacionVentana' stamp: 'swlaptop 12/17/2023 03:43'!cerrar	"Cierra las ventanas y llama al metodo cerrar de cada una de las subclases"	clienteVisual cerrar.	viajeVisual cerrar.	contratoVisual cerrar.	ventanaB ifNotNil: [ ventanaB delete ].	ventanaC ifNotNil: [ ventanaC delete ].	self delete! !!TurismoVisual methodsFor: 'visualizacionVentana' stamp: 'swlaptop 12/14/2023 16:08'!esconder: unaVentana"esconde unaVentana"unaVentana hide.	! !!TurismoVisual methodsFor: 'verification' stamp: 'Jere 12/20/2023 21:07'!verificarVencimiento	"Metodo que llama a notificarVencimiento de EmpresaTurismo y muestra la lista retornada"	| listaClientes clientes esconder tituloVent|	listaClientes := miEmpresita notificarVencimiento.	clientes := self listaString: listaClientes.	clientes ifNil:[clientes:= 'No hay contratos proximos a vencer!!'].	ventanaC := BorderedMorph new.	tituloVent := StringMorph new.	ventanaC		color: Color lightGray;		position: ventanaC topRight + (700 @ 150);		bounds: (ventanaC position extent: 500 @ 700).	esconder := BotonAccion new.	ventanaC		addMorph: morphC;		addMorph: tituloVent;		addMorph: esconder.	morphC		margins: 100 @ 0;		position: ventanaC position + (0 @ 20) - (70 @ 0);		contents: clientes;		color: Color black;		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	esconder		position: ventanaC position + (475 @ 0);		label: '-';		height: 20;		width: 25;		color: Color lightGray;		borderWidth: 3;		borderColor: Color black.	tituloVent		position: ventanaC position + (50@5);		contents: 'VENCIMIENTO PROXIMO';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 300);		color: Color black.	esconder mouseAction: [ self esconder: ventanaC ].	botonC mouseAction: [ self mostrar: ventanaC ].	ventanaC openInWorld! !!TurismoVisual methodsFor: 'initialization' stamp: 'swlaptop 12/14/2023 15:52'!initialize	super initialize.	self inicializar.	! !!TurismoVisual methodsFor: 'initialization' stamp: 'swlaptop 12/13/2023 22:48'!crearTexto: cadena	"Crea un textMorph para la cadena"	|textMorph|	textMorph:= TextMorph new.	textMorph contents: cadena.	^textMorph.! !!TurismoVisual methodsFor: 'initialization' stamp: 'swlaptop 12/21/2023 12:17'!realizarCargaInicial	"Metodo que realiza una carga inicial"	| viajecito1 viajecito2 clientito1 clientito2 clientito3 clientito4 contratito1 contratito2 contratito3 contratos1 contratos2 contratos3 contratos4 cargado excursion1 excursion2 excursion3 excursion4 salidas1 salidas2 fecha1 fecha2 fecha3 otraFecha excurs viajecito |	excursion1 := Excursion		              crear: 1		              con: 'Cerro campanario'		              con: 'lindo dia'		              con: 2000.	excursion2 := Excursion		              crear: 2		              con: 'Cerro Otto'		              con: 'hermosa experiencia!!'		              con: 3000.	excursion3 := Excursion		              crear: 3		              con: 'Cataratas del Iguazu'		              con: 'hermosa experiencia!!'		              con: 5000.	excursion4 := Excursion		              crear: 4		              con: 'Potrerillos'		              con: 'hermosa experiencia!!'		              con: 1000.	fecha1 := FechaSalida crear: '12/20/2023' con: 20.	salidas1 := OrderedCollection new.	salidas1 add: fecha1.	contratos1 := OrderedCollection new.	contratos2 := OrderedCollection new.	contratos3 := OrderedCollection new.	contratos4 := OrderedCollection new.	viajecito1 := ViajeOrganizado		              crear: 'Bariloche!!'		              con: 100000		              con: salidas1		              con: 20		              con: OrderedCollection new		              con: OrderedCollection new.	fecha2 := FechaSalida crear: '06/16/2024' con: 20.	salidas2 := OrderedCollection new.	salidas2 add: fecha2.	fecha3 := FechaSalida crear: '07/16/2024' con: 10.	salidas2 add: fecha3.	viajecito2 := ViajeOrganizado		              crear: 'Brasil 2024'		              con: 200000		              con: salidas2		              con: 14		              con: OrderedCollection new		              con: OrderedCollection new.	otraFecha := FechaSalida crear: '08/17/2024' con: 5.	viajecito := ViajeEspecial		             crear: 'Mendoza'		             con: 50000		             con: 'Mendoza'		             con: otraFecha		             con: '08/25/2024'.	cargado := miEmpresita agregarViaje: viajecito.	cargado := cargado and: [ miEmpresita agregarViaje: viajecito1 ].	cargado := cargado and: [ miEmpresita agregarViaje: viajecito2 ].	miEmpresita		agregarExcursionViaje: excursion1 conNombreViaje: 'Bariloche!!';		agregarExcursionViaje: excursion2 conNombreViaje: 'Bariloche!!';		agregarExcursionViaje: excursion3 conNombreViaje: 'Brasil 2024'.	clientito1 := Cliente		              new;		              crear: 'Cleopatra'		              con: 21309123		              con: 'Comodoro Rivadavia'		              con: 299123456		              con: contratos1		              con: 'preferencias'.	clientito2 := Cliente		              new;		              crear: 'Vale'		              con: 45106140		              con: 'Comodoro Rivadavia'		              con: 2994021366		              con: contratos2		              con: 'preferencias'.	clientito3 := Cliente		              new;		              crear: 'Mendi'		              con: 12345678		              con: 'Neuquen'		              con: 2993331344		              con: contratos3		              con: 'preferencias'.	clientito4 := Cliente		              new;		              crear: 'Jere'		              con: 23456789		              con: 'Neuquen'		              con: 2994441234		              con: contratos4		              con: 'preferencias'.	cargado := cargado and: [ miEmpresita agregarCliente: clientito1 ].	cargado := cargado and: [ miEmpresita agregarCliente: clientito2 ].	cargado := cargado and: [ miEmpresita agregarCliente: clientito3 ].	cargado := cargado and: [ miEmpresita agregarCliente: clientito4 ].	cargado		ifTrue: [			viajecito addDependent: viajeVisual.			clientito1 addDependent: clienteVisual.			viajecito1 addDependent: viajeVisual.			clientito2 addDependent: clienteVisual.			viajecito2 addDependent: viajeVisual.			clientito3 addDependent: clienteVisual.			clientito4 addDependent: clienteVisual.			contratito1 := miEmpresita				               generarContrato: 1				               con: 21309123				               con: 'Bariloche!!'				               con: '12/20/2023'				               con: 5				               con: 24.			contratito2 := miEmpresita				               generarContrato: 2				               con: 45106140				               con: 'Mendoza'				               con: '08/17/2024'				               con: 1				               con: 12.			contratito3 := miEmpresita				               generarContrato: 3				               con: 23456789				               con: 'Brasil 2024'				               con: '06/16/2024'				               con: 2				               con: 24.			contratito1				ifNotNil: [					UIManager default inform: 'Carga inicial realizada'.					contratito1 addDependent: contratoVisual.					contratito2 addDependent: contratoVisual.					contratito3 addDependent: contratoVisual.					contratoVisual update: contratito2 ]				ifNil: [				UIManager default inform: 'No se pudo realizar la carga inicial' ] ]		ifFalse: [		UIManager default inform: 'No se pudo realizar la carga inicial' ]! !!TurismoVisual methodsFor: 'initialization' stamp: 'swlaptop 12/20/2023 23:06'!inicializar	| data logoFai fecha |	self		color: Color paleTan;		position: 0 @ 0;		bounds: (self position extent: 1920 @ 950).	"Conexion vista-modelo"	miEmpresita := EmpresaTurismo crear.	"Se crea un ImageMorph para el logo"	logoFai := ImageMorph new.	"Se crea un morph para la fecha"	fecha := Date today asMorph.	"Elementos graficos para mostrar informacion de la empresa"	titulo := StringMorph new.	data := TextMorph new.	morphC := TextMorph new.	stringClientes := StringMorph new.	stringViajes := StringMorph new.	"Se crean instancias de contratoVisual, viajeVisual y clienteVisual"	contratoVisual := ContratoVisual new.	viajeVisual := ViajeVisual new.	clienteVisual := ClienteVisual new.	contratoVisual asignarEmpresa: miEmpresita.	viajeVisual asignarEmpresa: miEmpresita.	clienteVisual asignarEmpresa: miEmpresita.	"Se crean los botones para ejecutar los incisos B y C y para agregar excursiones a un viaje"	botonA := BotonAccion new.	botonB := BotonAccion new.	botonC := BotonAccion new.	"Se crea el boton para cerrar"	botonCerrar := BotonAccion new.	"Se crea el boton para realizar una carga inicial"	botonCargaInicial := BotonAccion new.	"Se agregan los elementos a TurismoVisual"	self		addMorph: botonA;		addMorph: botonB;		addMorph: botonC;		addMorph: botonCerrar;		addMorph: contratoVisual;		addMorph: viajeVisual;		addMorph: clienteVisual;		addMorph: titulo;		addMorph: fecha;		addMorph: logoFai;		addMorph: botonCargaInicial;		addMorph: stringClientes;		addMorph: stringViajes;		addMorph: data.	"Se posicionan los elementos gráficos dentro del área de FechaVisual"	contratoVisual		position: 1 @ 1;		color: Color paleTan;		borderWidth: 0.	clienteVisual		position: 1 @ 1;		color: Color paleTan;		borderWidth: 0.	viajeVisual		position: 1 @ 1;		color: Color paleTan;		borderWidth: 0.	titulo		position: 800 @ 10;		contents: 'NUESTRA EMPRESITA :)';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 400);		color: Color black;		borderColor: Color black;		extent: 500 @ 500.	botonA		position: 30 @ 100;		label: 'Agregar nueva excursion a viaje';		height: 60;		color: Color lightGray;		borderWidth: 3;		borderColor: Color black.	botonB		position: 30 @ 180;		label: 'Ver viajes disponibles en un rango de fechas';		height: 60;		color: Color lightGray;		borderWidth: 3;		borderColor: Color black.	botonC		position: 30 @ 260;		label: 'Ver clientes con contratos proximos a vencer';		height: 60;		color: Color lightGray;		borderWidth: 3;		borderColor: Color black.	botonCerrar		position: 1880 @ 10;		label: 'X';		height: 35;		width: 35;		color: Color red.	"logoFai		image: (ColorForm fromFileNamed:					 '/home/sw/Escritorio/Programacion orientada a objetos/logo.png');		position: 1720 @ 750."	data		position: 665 @ 917;		contents:			'Trabajo Final - POO: Jaleniecki Jeremias - Mendiberri Ignacio - Villarroel Valentina'.	fecha position: 10 @ 920.	botonCargaInicial		position: 30 @ 740;		label: 'Carga inicial'.	stringClientes		position: 700 @ 70;		contents: 'Clientes: ' , miEmpresita getCantClientes asString;		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 100);		color: Color black.	stringViajes		position: 1100 @ 70;		contents: 'Viajes: ' , miEmpresita getCantViajes asString;		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 100);		color: Color black.	"Agregamos como dependiente la instancia de TurismoVisual"	miEmpresita addDependent: self.	self update: miEmpresita.	"Se envian las acciones a realizar cuando se apriete el boton"	botonA mouseAction: [ self pedirExcursion ].	botonCerrar mouseAction: [ self cerrar ].	botonB mouseAction: [ self pedirFechas ].	botonC mouseAction: [ self verificarVencimiento ].	botonCargaInicial mouseAction: [ self realizarCargaInicial ]! !!TurismoVisual methodsFor: 'updating' stamp: 'swlaptop 12/18/2023 00:38'!update: objeto	"Metodo que actualiza la cantidad de clientes, contratos y viajes que tiene la empresa"	| listaClientes clientes |	objeto ifNotNil: [		stringClientes contents:			'Clientes: ' , objeto getCantClientes asString.		stringViajes contents: 'Viajes: ' , objeto getCantViajes asString.		listaClientes := objeto notificarVencimiento.		clientes := self listaString: listaClientes.		morphC contents: clientes ]! !TurismoVisual subclass: #ClienteVisual	instanceVariableNames: 'botonH botonClientes clienteVentana morph stringContratos'	classVariableNames: ''	package: 'TpFinal'!!ClienteVisual methodsFor: 'add/remove' stamp: 'swlaptop 12/17/2023 15:55'!darAlta: apellido con: dni con: ciudad con: telefono con: preferencias	"Metodo que da de alta un cliente con los datos de varios morphs de texto y cierra la ventana del formulario"	| cliente colContratos agregado |	"Crear el cliente con esos resultados"	colContratos := OrderedCollection new.	cliente := Cliente		           crear: apellido asString		           con: dni asNumber		           con: ciudad asString		           con: telefono asNumber		           con: colContratos		           con: preferencias asString.	cliente addDependent: self.	"Agrega el cliente a la empresa"	agregado := miEmpresita agregarCliente: cliente.	self accionRealizada: agregado.	"Elimina la ventana del formulario"	ventanaFormulario delete! !!ClienteVisual methodsFor: 'updating' stamp: 'swlaptop 12/18/2023 01:13'!update: objeto	| listaClientes clientes |	"El metodo actualiza el string de clientes"	objeto ifNotNil: [		listaClientes := miEmpresita obtenerClientes.		clientes := self listaString: listaClientes.		morph contents: clientes.		stringContratos contents:			'Contratos: ' , miEmpresita getCantContratos asString ]! !!ClienteVisual methodsFor: 'initialization' stamp: 'IgnacioMendiberri 12/16/2023 15:07'!asignarEmpresa: empresita	miEmpresita := empresita .! !!ClienteVisual methodsFor: 'initialization' stamp: 'swlaptop 12/14/2023 15:55'!initialize	super initialize.! !!ClienteVisual methodsFor: 'initialization' stamp: 'swlaptop 12/16/2023 16:15'!inicializar	"Se crean los botones para ejecutar el inciso H y mostrar clientes"	botonH := BotonAccion new.	botonClientes := BotonAccion new.	morph := TextMorph new.	stringContratos := StringMorph new.	"Se agregan los elementos a ClienteVisual"	self		addMorph: botonH;		addMorph: botonClientes;		addMorph: stringContratos.	"Se posicionan los elementos gráficos dentro del área de ClienteVisual"	botonH		position: 30 @ 660;		label: 'ABM Clientes';		height: 60;		color: Color lightGray;		borderWidth: 3;		borderColor: Color black.	botonClientes		position: 1550 @ 140;		label: 'Lista CLIENTES';		height: 60;		color: Color lightRed;		borderWidth: 3;		borderColor: Color black.	stringContratos		position: 880 @ 70;		contents: 'Contratos: 0';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 100);		color: Color black.	"Se envian las acciones a realizar cuando se apriete el boton"	botonH mouseAction: [ self abm ].	botonClientes mouseAction: [ self obtenerClientes ]! !!ClienteVisual methodsFor: 'ui - requests' stamp: 'swlaptop 12/17/2023 04:40'!pedirModificacion	"Modulo que pide decidir que atributo quieren modificar y llama al metodo de Cliente correspondiente"	| opcion cliente dniCliente |	dniCliente := UIManager default request:		              'Ingrese el dni del cliente a modificar'.	cliente := miEmpresita obtenerCliente: dniCliente asNumber.	cliente		ifNotNil: [			opcion := UIManager default				          chooseFrom:				          #( 'Apellido' 'Ciudad' 'Contacto' 'Preferencias' )				          message: 'Eliga una opcion'. "(0-cancelo 1-apellido 2-ciudad 3-contacto 4- preferencias)"			opcion = 0				ifFalse: [					opcion = 1						ifTrue: [ self modificarApellido: cliente ]						ifFalse: [							opcion = 2								ifTrue: [ self modificarCiudad: cliente ]								ifFalse: [									opcion = 3										ifTrue: [ self modificarContacto: cliente ]										ifFalse: [ self modificarPreferencias: cliente ] ] ] ]				ifTrue: [ UIManager default inform: 'Operacion cancelada' ] ]		ifNil: [			UIManager default inform:				'El DNI ingresado no corresponde a un cliente de la empresa' ]! !!ClienteVisual methodsFor: 'ui - requests' stamp: 'swlaptop 12/17/2023 04:36'!pedirBaja	"Metodo que pide el dni del cliente y elimina al mismo"	| dni eliminado |	dni := UIManager default request: 'Ingrese el dni del cliente'.	eliminado := miEmpresita eliminarCliente: dni asNumber.	self accionRealizada: eliminado! !!ClienteVisual methodsFor: 'ui - requests' stamp: 'Jere 12/20/2023 20:33'!pedirAlta	"Metodo que crea una ventana y le agrega morphs de texto y botones para pedir los datos de un nuevo Cliente"	| botonEnviar dni apellido ciudad telefono preferencias tituloForm|	super pedirAlta.	ventanaFormulario bounds:		(ventanaFormulario position extent: 650 @ 400).	dni := TextMorph new.	apellido := TextMorph new.	ciudad := TextMorph new.	telefono := TextMorph new.	preferencias := TextMorph new.	botonEnviar := BotonAccion new.	tituloForm := StringMorph new.	ventanaFormulario		addMorph: dni;		addMorph: apellido;		addMorph: preferencias;		addMorph: ciudad;		addMorph: telefono;		addMorph: botonEnviar;		addMorph: tituloForm.	botonEnviar		position: ventanaFormulario bottomRight - (100 @ 60);		label: 'Enviar';		mouseAction: [			self				darAlta: apellido text				con: dni text				con: ciudad text				con: telefono text				con: preferencias  text].	preferencias		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 270);		contents: 'Ingrese aqui las PREFERENCIAS';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	telefono		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 200);		contents: 'Ingrese aqui el TELEFONO           ';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	ciudad		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 140);		contents: 'Ingrese aqui la CIUDAD';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	apellido		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 70);		contents: 'Ingrese aqui el APELLIDO';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	dni		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0);		contents: 'Ingrese aqui el DNI';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	tituloForm		position: ventanaFormulario position + (225@5);		contents: 'Alta cliente';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 400);		color: Color black.	ventanaFormulario openInWorld! !!ClienteVisual methodsFor: 'visualizacionVentana' stamp: 'swlaptop 12/17/2023 03:44'!cerrar 	ventanaFormulario ifNotNil: [ ventanaFormulario delete ].	clienteVentana ifNotNil: [ clienteVentana delete ].! !!ClienteVisual methodsFor: 'setting' stamp: 'swlaptop 12/15/2023 01:31'!modificarContacto: cliente	"Metodo que pide el nuevo contacto y lo modifica"	| contacto |	contacto := UIManager default request: 'Ingrese el nuevo contacto'.	cliente setContacto: contacto.	self accionRealizada: true.! !!ClienteVisual methodsFor: 'setting' stamp: 'swlaptop 12/15/2023 01:31'!modificarCiudad: cliente	"Metodo que pide la nueva ciudad y la modifica"	| ciudad |	ciudad := UIManager default request: 'Ingrese la nueva ciudad'.	cliente setCiudad: ciudad.	self accionRealizada: true.! !!ClienteVisual methodsFor: 'setting' stamp: 'swlaptop 12/17/2023 15:55'!modificarApellido: cliente	"Metodo que pide el nuevo apellido y lo modifica"	| apellido |	apellido := UIManager default request: 'Ingrese el nuevo apellido'.	cliente setApellido: apellido.	self accionRealizada: true! !!ClienteVisual methodsFor: 'setting' stamp: 'swlaptop 12/15/2023 01:31'!modificarPreferencias: cliente	"Metodo que pide las nuevas preferencias y las modifica"	| pref |	pref := UIManager default request: 'Ingrese las nuevas preferencias'.	cliente setPreferencias: pref.	self accionRealizada: true.! !!ClienteVisual methodsFor: 'set and get' stamp: 'swlaptop 12/20/2023 22:37'!obtenerClientes	"Metodo que llama a obtenerClientes de EmpresaTurismo e imprime la lista retornada"	| listaClientes clientes esconder |	listaClientes := miEmpresita obtenerClientes.	clientes := self listaString: listaClientes.	clienteVentana := BorderedMorph new.	clienteVentana		color: Color lightRed;		position: clienteVentana topRight + (1300 @ 50);		bounds: (clienteVentana position extent: 500 @ 900).	esconder := BotonAccion new.	clienteVentana		addMorph: morph;		addMorph: esconder.	morph		margins: 100 @ 0;		position: clienteVentana position + (0 @ 20) - (70 @ 0);		contents: clientes;		color: Color black;		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	esconder		position: clienteVentana position + (475 @ 0);		label: '-';		height: 20;		width: 25;		color: Color lightGray;		borderWidth: 3;		borderColor: Color black.	esconder mouseAction: [ self esconder: clienteVentana ].	botonClientes mouseAction: [ self mostrar: clienteVentana ].	clienteVentana openInWorld! !TurismoVisual subclass: #ContratoVisual	instanceVariableNames: 'botonContratos botonD botonE botonF contratoVentana morph'	classVariableNames: ''	package: 'TpFinal'!!ContratoVisual methodsFor: 'updating' stamp: 'swlaptop 12/18/2023 01:13'!update: objeto	| listaContratos contratos |	"El metodo actualiza el string de contratos"	objeto ifNotNil: [		listaContratos := miEmpresita obtenerContratos.		contratos := self listaString: listaContratos.		morph contents: contratos ]! !!ContratoVisual methodsFor: 'visualizacionVentana' stamp: 'swlaptop 12/17/2023 03:44'!cerrar	contratoVentana ifNotNil: [ contratoVentana delete ].	ventanaFormulario ifNotNil: [ ventanaFormulario delete ].! !!ContratoVisual methodsFor: 'initialization' stamp: 'IgnacioMendiberri 12/16/2023 15:07'!asignarEmpresa: empresita	miEmpresita := empresita .! !!ContratoVisual methodsFor: 'initialization' stamp: 'swlaptop 12/14/2023 15:51'!initialize	super initialize.	! !!ContratoVisual methodsFor: 'initialization' stamp: 'swlaptop 12/18/2023 02:45'!inicializar	"Elementos graficos para mostrar informacion de la empresa"	botonContratos := BotonAccion new.	"Se crean los botones para ejecutar el inciso D, E, F"	botonD := BotonAccion new.	botonE := BotonAccion new.	botonF := BotonAccion new.	morph := TextMorph new.	"Se agregan los elementos a ContratoVisual"	self		addMorph: botonD;		addMorph: botonE;		addMorph: botonF;		addMorph: botonContratos.	"Se posicionan los elementos gráficos dentro del área de ContratoVisual"	botonD		position: 30 @ 340;		label: 'Pagar una o mas cuotas';		height: 60;		color: Color lightGray;		borderWidth: 3;		borderColor: Color black.	botonE		position: 30 @ 420;		label: 'ABM Contratos';		height: 60;		color: Color lightGray;		borderWidth: 3;		borderColor: Color black.	botonF		position: 30 @ 500;		label: 'Agregar excursiones a un contrato';		height: 60;		color: Color lightGray;		borderWidth: 3;		borderColor: Color black.	botonContratos		position: 1550 @ 210;		label: 'Lista CONTRATOS';		height: 60;		color: Color lightMagenta;		borderWidth: 3;		borderColor: Color black.	"Se envian las acciones a realizar cuando se apriete el boton"	botonD mouseAction: [ self pedirDatosPago ].	botonE mouseAction: [ self abm ].	botonF mouseAction: [ self pedirExcursion ].	botonContratos mouseAction: [ self obtenerContratos ]! !!ContratoVisual methodsFor: 'add/remove' stamp: 'swlaptop 12/19/2023 23:36'!darAltaNormal: numero con: dniCliente con: nombreViaje con: fechaViaje con: personas con: cuotasT	"Metodo que da de alta un contrato con los datos de varios morphs de texto y cierra la ventana del formulario"	| contratito generado |	"Crear el contrato con esos resultados"	generado := false.	contratito := miEmpresita		              generarContrato: numero asNumber		              con: dniCliente asNumber		              con: nombreViaje asString		              con: fechaViaje asString		              con: personas asNumber		              con: cuotasT asNumber.	contratito ifNotNil: [		contratito addDependent: self.		self update: contratito.		generado := true ].	self accionRealizada: generado.	"Elimina la ventana del formulario"	ventanaFormulario delete! !!ContratoVisual methodsFor: 'add/remove' stamp: 'swlaptop 12/19/2023 23:38'!darAltaFlexible: numero con: dniCliente con: nombreViaje con: fechaViaje con: personas con: cuotasT con: valorPlus	"Metodo que da de alta un contrato con los datos de varios morphs de texto y cierra la ventana del formulario"	| contratito generado |	"Crear el contrato con esos resultados"	generado := false.	contratito := miEmpresita		              generarContratoFlexible: numero asNumber		              con: dniCliente asNumber		              con: nombreViaje asString		              con: fechaViaje asString		              con: personas asNumber		              con: cuotasT asNumber		              con: valorPlus asNumber.	contratito ifNotNil: [		contratito addDependent: self.		self update: contratito.		generado := true ].	self accionRealizada: generado.	"Elimina la ventana del formulario"	ventanaFormulario delete! !!ContratoVisual methodsFor: 'set and get' stamp: 'swlaptop 12/20/2023 22:37'!obtenerContratos	"Metodo que llama obtenerContratos de EmpresaTurismo e imprime la lista retornada"	| listaContratos contratos esconder |	listaContratos := miEmpresita obtenerContratos.	contratos := self listaString: listaContratos.	contratoVentana := BorderedMorph new.	contratoVentana		color: Color lightMagenta;		position: contratoVentana topRight + (1300 @ 50);		bounds: (contratoVentana position extent: 500 @ 900).	esconder := BotonAccion new.	contratoVentana		addMorph: morph;		addMorph: esconder.	morph		margins: 200 @ 0;		position: contratoVentana position + (0 @ 20) - (170 @ 0);		contents: contratos;		color: Color black;		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	esconder		position: contratoVentana position + (475 @ 0);		label: '-';		height: 20;		width: 25;		color: Color lightGray;		borderWidth: 3;		borderColor: Color black.	esconder mouseAction: [ self esconder: contratoVentana ].	botonContratos mouseAction: [ self mostrar: contratoVentana ].	contratoVentana openInWorld! !!ContratoVisual methodsFor: 'ui-requests' stamp: 'swlaptop 12/17/2023 04:37'!pedirBaja	"Metodo que pide los datos y llama a registrarCancelacion de EmpresaTurismo"	| nroContrato reembolso |	nroContrato := UIManager default request:		               'Ingrese el numero de contrato'.	reembolso := miEmpresita registrarCancelacion: nroContrato asNumber. 	reembolso = -1		ifTrue: [ UIManager default inform: 'Se han cargado las millas' ]		ifFalse: [			reembolso = 0				ifTrue: [ self accionRealizada: false ]				ifFalse: [					UIManager default inform:						'Corresponde un reembolso de: ' , reembolso asString ] ]! !!ContratoVisual methodsFor: 'ui-requests' stamp: 'swlaptop 12/17/2023 15:29'!pedirExcursion	| nroExcursion cantPersonas nroContrato contratito agregado dni clientito |	agregado := false.	dni := UIManager default request: 'Ingrese el DNI del cliente'.	nroContrato := UIManager default request:		               'Ingrese el numero de contrato'.	nroExcursion := UIManager default request:		                'Ingrese el numero de la excursion que desea agregar'.	cantPersonas := UIManager default request:		                'Ingrese la cantidad de personas que realizaran esa excursion'.	clientito := miEmpresita obtenerCliente: dni asNumber.	clientito ifNotNil: [		contratito := clientito obtenerContrato: nroContrato asNumber.		agregado := contratito			            agregarExcursion: nroExcursion asNumber			            conCant: cantPersonas asNumber].	self accionRealizada: agregado! !!ContratoVisual methodsFor: 'ui-requests' stamp: 'swlaptop 12/17/2023 15:28'!pedirEfectivizacion	"Metodo que pide los datos y llama a registrarEfectivizacion de EmpresaTurismo"	| nroContrato |	nroContrato := UIManager default request:		               'Ingrese el numero de contrato'.	miEmpresita registrarEfectivizacion: nroContrato asNumber.! !!ContratoVisual methodsFor: 'ui-requests' stamp: 'Jere 12/20/2023 20:40'!pedirAlta	"Metodo que crea una ventana y le agrega morphs de texto y botones para pedir los datos de un nuevo Contrato"	| numero dniCliente nombreViaje fechaViaje personas cuotasT botonEnviar opcion valorPlus tituloForm|	super pedirAlta.	valorPlus := TextMorph new.	numero := TextMorph new.	dniCliente := TextMorph new.	nombreViaje := TextMorph new.	fechaViaje := TextMorph new.	personas := TextMorph new.	cuotasT := TextMorph new.	botonEnviar := BotonAccion new.	tituloForm := StringMorph new.	ventanaFormulario		addMorph: numero;		addMorph: dniCliente;		addMorph: nombreViaje;		addMorph: fechaViaje;		addMorph: cuotasT;		addMorph: personas;		addMorph: botonEnviar;		addMorph: tituloForm.	cuotasT		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 340);		contents: 'Ingrese aqui las CUOTAS TOTALES';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	personas		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 270);		contents: 'Ingrese aqui la CANTIDAD DE PERSONAS';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	fechaViaje		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 200);		contents: 'Ingrese aqui la FECHA DEL VIAJE (mm/dd/yyyy)';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	nombreViaje		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 140);		contents: 'Ingrese aqui el NOMBRE DEL VIAJE';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	dniCliente		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 70);		contents: 'Ingrese aqui el DNI DEL CLIENTE';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	numero		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0);		contents: 'Ingrese aqui NUMERO DEL CONTRATO';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	botonEnviar		position: ventanaFormulario bottomRight - (100 @ 60);		label: 'Enviar'.	tituloForm		position: ventanaFormulario position + (170@5);		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 400);		color: Color black.	opcion := UIManager default		          chooseFrom: #( '"Normal"' '"Flexible"' )		          message: 'Eliga una opcion'. "(0-cancelo 1-Normal 2-Flexible)"	opcion = 0 ifFalse: [		opcion = 1			ifTrue: [				botonEnviar mouseAction: [					self						darAltaNormal: numero text						con: dniCliente text						con: nombreViaje text						con: fechaViaje text						con: personas text						con: cuotasT text ] ]			ifFalse: [				ventanaFormulario addMorph: valorPlus.				valorPlus					margins: 300 @ 50;					position: ventanaFormulario position - (270 @ 0) + (0 @ 410);					contents: 'Ingrese aqui el VALOR PLUS';					font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).				botonEnviar mouseAction: [					self						darAltaFlexible: numero text						con: dniCliente text						con: nombreViaje text						con: fechaViaje text						con: personas text						con: cuotasT text						con: valorPlus text ] ] ].	(opcion = 1 ifTrue:[tituloForm contents: 'ALTA CONTRATO NORMAL'] ifFalse: [tituloForm contents: 'ALTA CONTRATO FLEXIBLE']).	ventanaFormulario openInWorld! !!ContratoVisual methodsFor: 'ui-requests' stamp: 'swlaptop 12/17/2023 04:35'!pedirDatosPago	"Metodo que pide los datos y llama a realizarPago de EmpresaTurismo "	| cantidadCuotas numeroContrato pagado dni clientito |	pagado := false.	dni := UIManager default request: 'Ingrese el DNI del cliente'.	numeroContrato := UIManager default request:		                  'Ingrese el numero del contrato'.	cantidadCuotas := UIManager default request:		                  'Ingrese la cantidad de cuotas que desea pagar'.	clientito := miEmpresita obtenerCliente: dni asNumber.	clientito ifNotNil: [		pagado := clientito			          hacerPago: cantidadCuotas asNumber			          con: numeroContrato asNumber ].	self accionRealizada: pagado! !!ContratoVisual methodsFor: 'ui-requests' stamp: 'swlaptop 12/17/2023 15:59'!pedirModificacion	"Metodo que pide los datos y llama a registrarModificacion de EmpresaTurismo. SOLO se permite modificar la fecha de un Contrato"	| nroContrato fechita modificado |	nroContrato := UIManager default request:		               'Ingrese el numero de contrato'.	fechita := UIManager default request:		           'Ingrese la nueva fecha deseada'.	modificado := miEmpresita		              registrarModificacion: nroContrato asNumber		              paraFecha: fechita asString.	self accionRealizada: modificado! !Object subclass: #Viaje	instanceVariableNames: 'nombre costoPersona'	classVariableNames: 'porcImpuesto'	package: 'TpFinal'!!Viaje methodsFor: 'verification' stamp: 'swlaptop 12/15/2023 03:24'!viajeDisponible: nombreViaje"Metodo que verifica si nombreViaje es igual a nombre"	^ nombreViaje = nombre! !!Viaje methodsFor: 'verification' stamp: 'swlaptop 12/15/2023 03:26'!viajeDisponible: nombreViaje con: fechaViaje con: personas"Metodo que verifica si nombreViaje esta disponible"	^ nombreViaje = nombre! !!Viaje methodsFor: 'verification' stamp: 'swlaptop 12/15/2023 03:24'!verificarFecha: fecha1 regreso: fecha2"Metodo que es responsabilidad de las subclases"	^ self subclassResponsibility! !!Viaje methodsFor: 'verification' stamp: 'swlaptop 12/15/2023 03:21'!esViajeOrganizado"Metodo para verificar si es viaje organizado"	^ false! !!Viaje methodsFor: 'printing' stamp: 'swlaptop 12/17/2023 15:52'!toString	"Metodo que retorna una cadena con todos los datos de un viaje "	| cadena |	cadena := Character cr asString, 'Nombre: ' , nombre asString , Character cr asString	          , 'Costo por persona: ' , costoPersona asString	          , Character cr asString.	^ cadena! !!Viaje methodsFor: 'equality' stamp: 'swlaptop 12/15/2023 03:20'!esIgual: unViaje"Metodo que verifica si unViaje es igual a self nombreViaje"	| nombreViaje |	nombreViaje := unViaje getNombre.	^ nombreViaje = nombre! !!Viaje methodsFor: 'initialization' stamp: 'swlaptop 12/15/2023 03:22'!inicializar: unNombre con: unCosto	"Metodo que inicializa los atributos de Viaje sin impuesto"	nombre := unNombre.	costoPersona := unCosto! !!Viaje methodsFor: 'initialization' stamp: 'swlaptop 12/15/2023 03:22'!inicializar: unNombre con: unCosto con: unValor"Metodo que inicializa todos los atributos de Viaje"	nombre := unNombre.	costoPersona := unCosto.	porcImpuesto := unValor! !!Viaje methodsFor: 'initialization' stamp: 'swlaptop 12/15/2023 03:21'!getNombre"Retorna el nombre"	^ nombre! !!Viaje methodsFor: 'aplicacion' stamp: 'IgnacioMendiberri 12/20/2023 19:13'!agregarExcursion: excursion	self esViajeOrganizado ifFalse: [ ^ self ].	self agregarExcursion: excursion.	self changed! !!Viaje methodsFor: 'setting' stamp: 'swlaptop 12/15/2023 03:22'!modificarCostoPersona: nuevoCosto	"Metodo que modifica el costo por persona y avisa a sus dependientes"	costoPersona := nuevoCosto.	self changed! !!Viaje methodsFor: 'setting' stamp: 'swlaptop 12/15/2023 03:22'!modificarImpuesto: nuevoValor	"Metodo que modifica el impuesto y avisa a sus dependientes"	porcImpuesto := nuevoValor.	self changed.! !!Viaje methodsFor: 'setting' stamp: 'swlaptop 12/21/2023 11:24'!disminuirCupo: fechaSalida con: personas	fechaSalida disminuirCupo: personas.	self changed.! !!Viaje methodsFor: 'as yet unclassified' stamp: 'IgnacioMendiberri 12/21/2023 14:16'!aumentarCupo: fechaSalida con: personas	fechaSalida aumentarCupo: personas.	self changed ! !!Viaje methodsFor: 'set and get' stamp: 'swlaptop 12/15/2023 03:21'!getCostoPersona"Retorna costo por persona"	^ costoPersona! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Viaje class	instanceVariableNames: 'impuestos'!!Viaje class methodsFor: 'modifying' stamp: 'swlaptop 12/8/2023 18:00'!modificarImpuesto: nuevoValor	impuestos := nuevoValor ! !!Viaje class methodsFor: 'constructor' stamp: 'swlaptop 12/8/2023 17:57'!crear: unNombre con: unCosto	|viajecito|	viajecito:= self new.	viajecito inicializar: unNombre con: unCosto.	^viajecito.! !!Viaje class methodsFor: 'constructor' stamp: 'vale 7/28/2023 14:51'!crear: unNombre con: unCosto con: unValor	|viajecito|	viajecito:= self new.	viajecito inicializar: unNombre con: unCosto con: unValor.	^viajecito.! !Viaje subclass: #ViajeEspecial	instanceVariableNames: 'ciudad fechaSalida fechaRegreso'	classVariableNames: ''	package: 'TpFinal'!!ViajeEspecial methodsFor: 'set and get' stamp: 'IgnacioMendiberri 12/21/2023 14:17'!aumentarCupo: personas	self aumentarCupo: fechaSalida con: personas.	! !!ViajeEspecial methodsFor: 'printing' stamp: 'swlaptop 12/20/2023 22:29'!toString	"Metodo que llama a super toString y concatena los atributos faltantes"	^ super toString , 'Ciudad: ' , ciudad asString	  , Character cr asString , 'Fecha de salida: '	  , fechaSalida getFecha asString , Character cr asString , 'Cupo: '	  , fechaSalida getCupo asString , Character cr asString	  , 'Fecha de regreso: ' , fechaRegreso asString	  , Character cr asString ! !!ViajeEspecial methodsFor: 'initialization' stamp: 'Jere 12/16/2023 17:28'!inicializar: unaCiudad con: unaSalida con: unRegreso"Metodo que inicializa los atributos propios de ViajeEspecial"	ciudad := unaCiudad.	fechaSalida := unaSalida.	fechaRegreso := Date readFrom: unRegreso readStream.! !!ViajeEspecial methodsFor: 'setting' stamp: 'swlaptop 12/15/2023 03:40'!modificarFechaSalida: nuevaFecha"Metodo que modifica la fecha de salida"	fechaSalida := nuevaFecha.	self changed.! !!ViajeEspecial methodsFor: 'setting' stamp: 'swlaptop 12/15/2023 03:36'!modificarCiudad: nuevaCiudad	"Metodo que modifica la ciudad y avisa a sus dependientes"	ciudad := nuevaCiudad.	self changed.! !!ViajeEspecial methodsFor: 'setting' stamp: 'swlaptop 12/15/2023 03:40'!modificarFechaRegreso: nuevaFecha"Metodo que modifica la fecha de regreso"	fechaRegreso := nuevaFecha.	self changed! !!ViajeEspecial methodsFor: 'setting' stamp: 'swlaptop 12/18/2023 02:04'!disminuirCupo: personas	self disminuirCupo: fechaSalida con: personas! !!ViajeEspecial methodsFor: 'verification' stamp: 'swlaptop 12/18/2023 04:09'!viajeDisponible: nombreViaje con: fechaViaje con: personas	"Metodo que verifica si el vaije esta disponible "	| disponible |	disponible := self viajeDisponible: nombreViaje.	disponible ifTrue: [		disponible := fechaSalida fechaDisponible: fechaViaje con: personas ].	^ disponible! !!ViajeEspecial methodsFor: 'verification' stamp: 'Jere 12/16/2023 17:32'!verificarFecha: fecha1 regreso: fecha2"Metodo que verifica si el viaje se encuentra en un rango de fechas"	| coincide dateF1 dateF2|	dateF1 := Date readFrom: fecha1 readStream.	dateF2 := Date readFrom: fecha2 readStream.		coincide := fechaSalida getFecha < dateF1 and: fechaRegreso > dateF2.	coincide ifFalse: [		coincide := fechaSalida getFecha > dateF1 and: fechaRegreso < dateF2 ].	^ coincide! !!ViajeEspecial methodsFor: 'verification' stamp: 'swlaptop 12/18/2023 04:09'!fechaDisponible: fechaViaje con: personas	"Metodo que verifica si el vaije esta disponible "	| disponible|		disponible := fechaSalida fechaDisponible: fechaViaje con: personas.	^ disponible! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ViajeEspecial class	instanceVariableNames: ''!!ViajeEspecial class methodsFor: 'constructor' stamp: 'swlaptop 12/13/2023 18:48'!crear: unNombre con: costo con: unaCiudad con: salida con: regreso	| viajecito |	viajecito := self crear: unNombre con: costo.	viajecito		inicializar: unaCiudad		con: salida		con: regreso.	^ viajecito! !Viaje subclass: #ViajeOrganizado	instanceVariableNames: 'fechasSalida cantDias planViaje excursiones'	classVariableNames: ''	package: 'TpFinal'!!ViajeOrganizado methodsFor: 'search' stamp: 'swlaptop 12/15/2023 03:42'!buscarExcursion: numExcursion"Metodo que retorna una excursion con numExcursion"	| unaExcursion |	unaExcursion := excursiones		                detect: [ :ex | ex verificarExcursion: numExcursion ]		                ifNone: [ nil ].	^ unaExcursion! !!ViajeOrganizado methodsFor: 'printing' stamp: 'swlaptop 12/20/2023 22:30'!toString	"Metodo que llama a super toString y concatena los atributos faltantes"	| fechas exc |	fechas := ''.	exc := ''.	fechasSalida do: [ :f | fechas := fechas , f getFecha asString , ' ' ].	excursiones do: [ :ex |		exc := exc , ex getNombreExcursion , Character cr asString ].	^ super toString , 'Fecha de salida: ' , fechas	  , Character cr asString , 'Cantidad de dias: ' , cantDias asString	  , Character cr asString , 'Excursiones: ' , Character cr asString	  , exc , Character cr asString! !!ViajeOrganizado methodsFor: 'setting' stamp: 'swlaptop 12/18/2023 02:26'!disminuirCupo: personas con: fechaViaje	| fechaSalida fechita |	fechita := Date readFrom: fechaViaje readStream.	fechaSalida := fechasSalida		               detect: [ :f | f getFecha = fechita ]		               ifNone: [ nil ].	super disminuirCupo: fechaSalida con: personas! !!ViajeOrganizado methodsFor: 'setting' stamp: 'swlaptop 12/15/2023 03:44'!modificarCantDias: nuevaCantidad	"Metodo que modifica la cantidad de dias y avisa a sus dependientes"	cantDias := nuevaCantidad.	self changed! !!ViajeOrganizado methodsFor: 'setting' stamp: 'swlaptop 12/15/2023 03:44'!modificarPlanDeViaje: nuevoPlan"Metodo que modifica la coleccion de etapas y avisa a sus dependientes"	planViaje := nuevoPlan.	self changed.! !!ViajeOrganizado methodsFor: 'setting' stamp: 'swlaptop 12/15/2023 03:44'!modificarExcursiones: nuevasExcursiones	"Metodo que modifica la coleccion de excursiones y avisa a sus dependientes"	excursiones := nuevasExcursiones.	self changed! !!ViajeOrganizado methodsFor: 'setting' stamp: 'swlaptop 12/15/2023 03:44'!modificarFechasSalida: nuevasFechas"Metodo que modifica la coleccion de fechas de salida y avisa a sus dependientes"	fechasSalida := nuevasFechas.	self changed.! !!ViajeOrganizado methodsFor: 'verification' stamp: 'swlaptop 12/15/2023 03:48'!fechaDisponible: fechaViaje con: personas	"Metodo que verifica si la fecha esta disponible"	^ fechasSalida anySatisfy: [ :cadaFecha |		  cadaFecha fechaDisponible: fechaViaje con: personas ]! !!ViajeOrganizado methodsFor: 'verification' stamp: 'IgnacioMendiberri 12/15/2023 18:49'!existeFechaSalida: fecha	|existe|	existe := fechasSalida anySatisfy: [:f | f getFecha ==fecha].	^existe! !!ViajeOrganizado methodsFor: 'verification' stamp: 'swlaptop 12/15/2023 03:45'!viajeDisponible: nombreViaje con: fechaViaje con: personas"Metodo que verifica si el viaje esta disponible"	| disponible unaFecha |	disponible := self viajeDisponible: nombreViaje.	disponible ifTrue: [		unaFecha := [		            fechasSalida detect: [ :cadaFecha |			            cadaFecha fechaDisponible: fechaViaje con: personas ] ].		unaFecha ifNotNil: [ disponible := true ] ].	^ disponible! !!ViajeOrganizado methodsFor: 'verification' stamp: 'swlaptop 12/15/2023 03:42'!esViajeOrganizado"Metodo para verificar si es viaje organizado"	^ true! !!ViajeOrganizado methodsFor: 'verification' stamp: 'Jere 12/21/2023 15:34'!verificarFecha: fecha1 regreso: fecha2"Metodo que verifica si el viaje se encuentra en un rango de fechas"	| fechaSalida fechaRegreso fechaEnRango dateRegreso|	"Verificamos cual de las fechas pasada por parametro es la primera y cual la segunda"	fechaSalida := fecha1.	fechaRegreso := fecha2.	fecha1 > fecha2 ifTrue: [		fechaSalida := fecha2.		fechaRegreso := fecha1 ].	dateRegreso := Date readFrom: fechaRegreso readStream.	"una vez que estan acomodadas detectamos en las fechas de salida si alguna tiene fecha de salida menor a la que nos pasaron por parametro, es decir esta en rango"	fechaEnRango := fechasSalida detect: [ :fe |		                fe verificarFecha: fechaSalida ] ifNone:[^false].	^ fechaEnRango getFecha + cantDias <= dateRegreso! !!ViajeOrganizado methodsFor: 'verification' stamp: 'IgnacioMendiberri 12/15/2023 19:10'!existeEtapa: nro	|existe|	existe := planViaje anySatisfy: [:e | e getNroEtapa == nro ].	^existe! !!ViajeOrganizado methodsFor: 'add/remove' stamp: 'swlaptop 12/16/2023 01:55'!eliminarEtapa: nroEtapa	planViaje delete: [ :e | e getNroEtapa = nroEtapa ].	self changed! !!ViajeOrganizado methodsFor: 'add/remove' stamp: 'swlaptop 12/16/2023 01:54'!agregarEtapa: etapa	planViaje add: etapa.	self changed.! !!ViajeOrganizado methodsFor: 'add/remove' stamp: 'IgnacioMendiberri 12/15/2023 19:32'!agregarFechaSalida: fechas	fechasSalida add: fechas.	self changed! !!ViajeOrganizado methodsFor: 'add/remove' stamp: 'swlaptop 12/15/2023 03:42'!agregarExcursion: excursion"Metodo que agrega una excursion a la coleccion excursiones y avisa a sus dependientes"	excursiones add: excursion.	self changed.! !!ViajeOrganizado methodsFor: 'as yet unclassified' stamp: 'IgnacioMendiberri 12/21/2023 14:18'!aumentarCupo: personas con: fechaViaje	| fechaSalida fechita |	fechita := Date readFrom: fechaViaje readStream.	fechaSalida := fechasSalida		               detect: [ :f | f getFecha = fechita ]		               ifNone: [ nil ].	super aumentarCupo: fechaSalida con: personas! !!ViajeOrganizado methodsFor: 'initialization' stamp: 'swlaptop 12/15/2023 03:43'!inicializar: salidas con: dias con: etapas con: excurs"Metodo que inicializa los atributos propios de ViajeOrganizado"	fechasSalida := salidas.	cantDias := dias.	planViaje := etapas.	excursiones := excurs! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ViajeOrganizado class	instanceVariableNames: ''!!ViajeOrganizado class methodsFor: 'constructor' stamp: 'vale 7/28/2023 15:11'!crear: unNombre con: costo con: valor con: salidas con: dias con: etapas con: excurs	| viajecito |	viajecito:= self crear: unNombre con: costo con: valor.	viajecito 		inicializar: salidas		con: dias		con: etapas		con: excurs.	^ viajecito! !!ViajeOrganizado class methodsFor: 'constructor' stamp: 'swlaptop 12/8/2023 18:08'!crear: unNombre con: costo con: salidas con: dias con: etapas con: excurs	| viajecito |	viajecito:= self crear: unNombre con: costo.	viajecito 		inicializar: salidas		con: dias		con: etapas		con: excurs.	^ viajecito! !TurismoVisual subclass: #ViajeVisual	instanceVariableNames: 'botonG botonViajes viajeVentana morph'	classVariableNames: ''	package: 'TpFinal'!!ViajeVisual methodsFor: 'add/remove' stamp: 'swlaptop 12/17/2023 15:49'!darAltaOrganizado: unNombre con: unCosto con: cantDias con: fechaSalida con: cupo	"Metodo que da de alta un Viaje con los datos de varios morphs de texto y cierra la ventana del formulario"	| agregado viajecito salidas etapas excurs salida |	"Crea las colecciones vacias"	salidas := OrderedCollection new.	etapas := OrderedCollection new.	excurs := OrderedCollection new.	"Crea una FechaSalida y la agrega a la coleccion salidas"	salida := FechaSalida crear: fechaSalida asString con: cupo asNumber.	salidas add: salida.	"Crear el Viaje con esos resultados"	viajecito := ViajeOrganizado		             crear: unNombre asString		             con: unCosto asNumber		             con: salidas		             con: cantDias asNumber		             con: etapas		             con: excurs.	viajecito addDependent: self.	agregado := miEmpresita agregarViaje: viajecito.	self accionRealizada: agregado.	"Elimina la ventana del formulario"	ventanaFormulario delete! !!ViajeVisual methodsFor: 'add/remove' stamp: 'swlaptop 12/17/2023 15:49'!darAltaEspecial: unNombre con: unCosto con: ciudad con: fechaSalida con: fechaRegreso con: cupo	"Metodo que da de alta un Viaje con los datos de varios morphs de texto y cierra la ventana del formulario"	| agregado viajecito salida |	salida := FechaSalida crear: fechaSalida asString con: cupo asNumber.	"Crear el Viaje con esos resultados"	viajecito := ViajeEspecial		             crear: unNombre asString		             con: unCosto asNumber		             con: ciudad asString		             con: salida 		             con: fechaRegreso asString.	viajecito addDependent: self.	agregado := miEmpresita agregarViaje: viajecito.	self accionRealizada: agregado.	"Elimina la ventana del formulario"	ventanaFormulario delete! !!ViajeVisual methodsFor: 'visualizacionVentana' stamp: 'swlaptop 12/17/2023 03:44'!cerrar	ventanaFormulario ifNotNil: [ ventanaFormulario delete ].	viajeVentana ifNotNil: [ viajeVentana delete ].! !!ViajeVisual methodsFor: 'set and get' stamp: 'swlaptop 12/20/2023 22:37'!obtenerViajes	"Metodo que llama obtenerViajes de EmpresaTurismo e imprime la lista retornada"	| listaViajes viajes esconder |	listaViajes := miEmpresita obtenerViajes.	viajes := self listaString: listaViajes.	viajeVentana := BorderedMorph new.	viajeVentana		color: Color paleGreen;		position: viajeVentana topRight + (1300 @ 50);		bounds: (viajeVentana position extent: 500 @ 900).	esconder := BotonAccion new.	viajeVentana		addMorph: morph;		addMorph: esconder.	morph		margins: 200 @ 0;		position: viajeVentana position + (0 @ 20) - (170 @ 0);		contents: viajes;		color: Color black;		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	esconder		position: viajeVentana position + (475 @ 0);		label: '-';		height: 20;		width: 25;		color: Color lightGray;		borderWidth: 3;		borderColor: Color black.	esconder mouseAction: [ self esconder: viajeVentana ].	botonViajes mouseAction: [ self mostrar: viajeVentana ].	viajeVentana openInWorld! !!ViajeVisual methodsFor: 'ui-requests' stamp: 'Jere 12/20/2023 20:42'!pedirAltaOrganizado	"Como planViaje y excursiones son colecciones de otras clases, no las pedimos al dar de alta un viaje, sino que pueden ser agregadas modificando el mismo. Pedimos una sola FechaSalida"	| unNombre unCosto cantDias botonEnviar fechaSalida cupo tituloForm|	fechaSalida := TextMorph new.	cupo := TextMorph new.	unNombre := TextMorph new.	unCosto := TextMorph new.	cantDias := TextMorph new.	botonEnviar := BotonAccion new.	tituloForm := StringMorph new.	ventanaFormulario		addMorph: unNombre;		addMorph: unCosto;		addMorph: cantDias;		addMorph: fechaSalida;		addMorph: cupo;		addMorph: botonEnviar;		addMorph: tituloForm.	botonEnviar		position: ventanaFormulario bottomRight - (100 @ 60);		label: 'Enviar';		mouseAction: [			self				darAltaOrganizado: unNombre text				con: unCosto text				con: cantDias text				con: fechaSalida text				con: cupo text ].	cupo		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 280);		contents: 'Ingrese aqui el CUPO';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	fechaSalida		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 210);		contents: 'Ingrese aqui la FECHA DE SALIDA (mm/dd/yyyy)';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	cantDias		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 140);		contents: 'Ingrese aqui la cantidad de DIAS';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	unCosto		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 70);		contents: 'Ingrese aqui el COSTO';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	unNombre		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0);		contents: 'Ingrese aqui el NOMBRE';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	tituloForm		position: ventanaFormulario position + (180@5);		contents: 'ALTA VIAJE ORGANIZADO';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 400);		color: Color black.	ventanaFormulario openInWorld! !!ViajeVisual methodsFor: 'ui-requests' stamp: 'swlaptop 12/17/2023 16:00'!pedirExcursiones: elViaje	| nuevaExc nombreExc nroExc descripExc costoXpersona agrego |	agrego := false.	nroExc := UIManager default request:		          'Ingrese el numero de la excursion'.	(elViaje buscarExcursion: nroExc) ifNil: [		agrego := true.		nombreExc := UIManager default request:			             'Ingrese el nombre de la excursion'.		descripExc := UIManager default request:			              'Ingrese una descripcion de la excursion'.		costoXpersona := UIManager default request:			                 'Ingrese el costo por persona de la excursion'.		nuevaExc := Excursion new			            crear: nroExc asNumber			            con: nombreExc asString			            con: descripExc asString			            con: costoXpersona asNumber.		elViaje agregarExcursion: nuevaExc ].	self accionRealizada: agrego! !!ViajeVisual methodsFor: 'ui-requests' stamp: 'swlaptop 12/17/2023 16:01'!pedirNuevaFecha: elViaje	| nuevaFecha fechaSal cupoFecha agrego |	agrego := false.	fechaSal := UIManager default request:		            'Ingrese la fecha de salida nueva (mm/dd/yyyy)'.	(elViaje existeFechaSalida: fechaSal asString) ifTrue: [		agrego := true.		cupoFecha := UIManager default request:			             'Ingrese el cupo de esta fecha'.		nuevaFecha := FechaSalida new			              crear: fechaSal asString 			              con: cupoFecha asNumber.		elViaje agregarFechaSalida: nuevaFecha ].	self accionRealizada: agrego! !!ViajeVisual methodsFor: 'ui-requests' stamp: 'swlaptop 12/17/2023 15:31'!pedirCantDias: elViaje	| nuevaCantidad |	nuevaCantidad := UIManager default request:		                 'Ingrese la nueva cantidad de dias'.	elViaje modificarCantDias: nuevaCantidad asNumber.	self accionRealizada: true! !!ViajeVisual methodsFor: 'ui-requests' stamp: 'swlaptop 12/16/2023 01:52'!pedirAlta	"Metodo que pide los datos para dar de alta un nuevo viaje, lo crea y lo agrega a la instancia de EmpresaTurismo"	| opcion |	opcion := UIManager default		          chooseFrom: #( 'Viaje organizado' 'Viaje especial' )		          message: 'Eliga el tipo de viaje que desea agregar'. "(0-cancelo 1-organizado 2-especial)"	opcion = 0 ifFalse: [super pedirAlta.		opcion = 1			ifTrue: [ self pedirAltaOrganizado ]			ifFalse: [				opcion = 2					ifTrue: [						self pedirAltaEspecial ]					ifFalse: [ UIManager default inform: 'Accion cancelada' ] ] ]! !!ViajeVisual methodsFor: 'ui-requests' stamp: 'swlaptop 12/17/2023 15:31'!pedirCostoXPersona: elViaje	| nuevoCosto |	nuevoCosto := UIManager default request:		              'Ingrese el nuevo costo por persona'.	elViaje modificarCostoPersona: nuevoCosto asNumber.	self accionRealizada: true! !!ViajeVisual methodsFor: 'ui-requests' stamp: 'swlaptop 12/18/2023 00:28'!pedirCiudad: elViaje	| nuevaCiudad |	nuevaCiudad := UIManager default request: 'Ingrese la nueva ciudad'.	elViaje modificarCiudad: nuevaCiudad asString.	self accionRealizada: true! !!ViajeVisual methodsFor: 'ui-requests' stamp: 'swlaptop 12/17/2023 16:00'!pedirFechaRegreso: elViaje	| nuevaFecha |	nuevaFecha := UIManager default request: 'Ingrese la nueva fecha'.	elViaje modificarFechaRegreso: nuevaFecha asString.	self accionRealizada: true! !!ViajeVisual methodsFor: 'ui-requests' stamp: 'swlaptop 12/17/2023 16:17'!pedirBaja	"Metodo que pide los datos para eliminar un viaje"	| unNombre unaFecha personas eliminado |	unNombre := UIManager default request: 'Ingrese el nombre del viaje'.	unaFecha := UIManager default request:		            'Ingrese la fecha del viaje mm/dd/yyyy'.	personas := UIManager default request:		            'Ingrese la cantidad de personas del viaje'.	eliminado := miEmpresita		             eliminarViaje: unNombre asString		             con: unaFecha asString		             con: personas asNumber.	self accionRealizada: eliminado! !!ViajeVisual methodsFor: 'ui-requests' stamp: 'swlaptop 12/17/2023 16:00'!pedirFechaSalida: elViaje	| nuevaFecha |	nuevaFecha := UIManager default request: 'Ingrese la nueva fecha'.	elViaje modificarFechaSalida: nuevaFecha asString.	self accionRealizada: true! !!ViajeVisual methodsFor: 'ui-requests' stamp: 'Jere 12/20/2023 20:41'!pedirAltaEspecial	"Como fechasSalida, planViaje y excursiones son colecciones de otras clases, no las pedimos al dar de alta un viaje, sino que pueden ser agregadas modificando el mismo"	| unNombre unCosto botonEnviar cupo ciudad fechaSalida fechaRegreso tituloForm|	unNombre := TextMorph new.	unCosto := TextMorph new.	ciudad := TextMorph new.	fechaRegreso := TextMorph new.	fechaSalida := TextMorph new.	cupo := TextMorph new.	botonEnviar := BotonAccion new.	tituloForm := StringMorph new.	ventanaFormulario		addMorph: unNombre;		addMorph: unCosto;		addMorph: ciudad;		addMorph: fechaSalida;		addMorph: fechaRegreso;		addMorph: cupo;		addMorph: botonEnviar;		addMorph: tituloForm.	botonEnviar		position: ventanaFormulario bottomRight - (100 @ 60);		label: 'Enviar';		mouseAction: [			self				darAltaEspecial: unNombre text				con: unCosto text				con: ciudad text				con: fechaSalida text				con: fechaRegreso text				con: cupo text ].	fechaRegreso		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 340);		contents: 'Ingrese aqui la FECHA DE REGRESO (mm/dd/yyyy)';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	cupo		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 280);		contents: 'Ingrese aqui el CUPO';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	fechaSalida		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 210);		contents: 'Ingrese aqui la FECHA DE SALIDA (mm/dd/yyyy)';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	ciudad		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 140);		contents: 'Ingrese aqui la CIUDAD';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	unCosto		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0) + (0 @ 70);		contents: 'Ingrese aqui el COSTO';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	unNombre		margins: 300 @ 50;		position: ventanaFormulario position - (270 @ 0);		contents: 'Ingrese aqui el NOMBRE';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 30).	tituloForm		position: ventanaFormulario position + (200@5);		contents: 'ALTA VIAJE ESPECIAL';		font: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 400);		color: Color black.	ventanaFormulario openInWorld! !!ViajeVisual methodsFor: 'ui-requests' stamp: 'swlaptop 12/18/2023 01:15'!pedirModificacion	"Modulo que pide decidir que atributo quieren modificar y llama al metodo de Viaje correspondiente"	| encuesta nombreViaje fechaViaje cantPerosnas viaje |	nombreViaje := UIManager default request:		               'Ingrese el nombre del viaje'.	fechaViaje := UIManager default request:		              'Ingrese la fecha del viaje  (mm/dd/yyyy)'.	cantPerosnas := UIManager default request:		                'Ingrese la cantidad de personas del viaje'.	viaje := miEmpresita		         obtenerViaje: nombreViaje asString		         con: fechaViaje asString		         con: cantPerosnas asNumber.	viaje ifNotNil: [		viaje esViajeOrganizado			ifTrue: [				encuesta := UIManager default					            chooseFrom:						            #( 'Fecha salida' 'cantidad de dias'						               'plan de viaje' 'excursiones' 'Costo por persona' )					            message: 'Indique que desea modificar'.				encuesta = 1					ifTrue: [ self pedirNuevaFecha: viaje ]					ifFalse: [						encuesta = 2							ifTrue: [ self pedirCantDias: viaje ]							ifFalse: [								encuesta = 3									ifTrue: [ self pedirPlanViaje: viaje ]									ifFalse: [										encuesta = 4											ifTrue: [ self pedirExcursiones: viaje ]											ifFalse: [											encuesta = 5 ifTrue: [ self pedirCostoXPersona: viaje ] ] ] ] ] ]			ifFalse: [				encuesta := UIManager default					chooseFrom:					#( 'Ciudad' 'Fecha salida' 'Fecha regreso' 'Costo por persona' )					message: 'Indique que desea modificar'.				encuesta = 1					ifTrue: [ self pedirCiudad: viaje ]					ifFalse: [						encuesta = 2							ifTrue: [ self pedirFechaSalida: viaje ]							ifFalse: [								encuesta = 3									ifTrue: [ self pedirFechaRegreso: viaje ]									ifFalse: [									encuesta = 4 ifTrue: [ self pedirCostoXPersona: viaje ] ] ] ] ] ]! !!ViajeVisual methodsFor: 'ui-requests' stamp: 'swlaptop 12/17/2023 16:02'!pedirPlanViaje: elViaje	| nuevaEtapa nro diaLlegada cantDias hotel tipoPension act modifico accion |	modifico := false.	accion := UIManager default		          chooseFrom: #( 'Agregar etapa' 'Eliminar etapa' )		          message: 'Que quiere realizar'.	accion = 1		ifTrue: [			nro := UIManager default request: 'Ingrese el numero de etapa'.			(elViaje existeEtapa: nro asNumber) ifTrue: [				modifico := true.				diaLlegada := UIManager default request:					              'Ingrese el dia de llegada'.				cantDias := UIManager default request:					            'Ingrese la cantidad de dias'.				hotel := UIManager default request: 'Ingrese el nombre del hotel'.				tipoPension := UIManager default request:					               'Ingrese el tipo de pension'.				act := UIManager default request: 'Ingrese las actividades'.				nuevaEtapa := Etapa					              crear: nro asNumber					              con: diaLlegada asString					              con: cantDias asNumber					              con: hotel asString					              con: tipoPension asString					              con: act asString.				elViaje agregarEtapa: nuevaEtapa ] ]		ifFalse: [			accion = 2 ifTrue: [				nro := UIManager default request: 'Ingrese el numero de etapa'.				modifico := elViaje existeEtapa: nro asNumber.				modifico ifTrue: [ elViaje eliminarEtapa: nro asNumber ] ] ].	self accionRealizada: modifico! !!ViajeVisual methodsFor: 'updating' stamp: 'swlaptop 12/18/2023 01:13'!update: objeto	"El metodo actualiza el string de viajes"	| listaViajes viajes |	objeto ifNotNil: [		listaViajes := miEmpresita obtenerViajes.		viajes := self listaString: listaViajes.		morph contents: viajes ]! !!ViajeVisual methodsFor: 'initialization' stamp: 'IgnacioMendiberri 12/16/2023 15:08'!asignarEmpresa: empresita	miEmpresita := empresita.! !!ViajeVisual methodsFor: 'initialization' stamp: 'swlaptop 12/14/2023 15:56'!initialize	super initialize.! !!ViajeVisual methodsFor: 'initialization' stamp: 'swlaptop 12/16/2023 03:33'!inicializar	"Elementos graficos para mostrar informacion de la empresa"	botonViajes := BotonAccion new.	"Se crean los botones para ejecutar el inciso G"	botonG := BotonAccion new.	morph := TextMorph new.	"Se agregan los elementos a ViajeVisual"	self		addMorph: botonG;		addMorph: botonViajes.	"Se posicionan los elementos gráficos dentro del área de ClienteVisual"	botonG		position: 30 @ 580;		label: 'ABM Viajes';		height: 60;		color: Color lightGray;		borderWidth: 3;		borderColor: Color black.	botonViajes		position: 1550 @ 280;		label: 'Lista VIAJES';		color: Color paleGreen;		height: 60;		borderWidth: 3;		borderColor: Color black.	"Se envian las acciones a realizar cuando se apriete el boton"	botonG mouseAction: [ self abm ].	botonViajes mouseAction: [ self obtenerViajes ]! !Cliente subclass: #ViajeroFrecuente	instanceVariableNames: 'millas'	classVariableNames: ''	package: 'TpFinal'!!ViajeroFrecuente methodsFor: 'do-its' stamp: 'swlaptop 12/15/2023 02:03'!registrarEfectivizacion: nroContrato"Metodo que llama a super registrarEfectivizacion, si efectivizo suma las millas correspondientes y avisa a sus dependientes"	| efectivizo |	efectivizo := super registrarEfectivizacion: nroContrato.	efectivizo ifTrue: [		millas := millas + contratos lastIndex getPrecio. self changed ].	^ efectivizo! !!ViajeroFrecuente methodsFor: 'do-its' stamp: 'swlaptop 12/15/2023 02:02'!registrarCancelacion: nroContrato	"Metodo que llama a super registrarCancelacion, si el reembolso es 0 lo retorna. Caso contrario, reembolsa al cliente en millas, avisa a sus depenendientes y devuelve -1"	| reembolso |	reembolso := super registrarCancelacion: nroContrato.	reembolso = 0 ifFalse: [		millas := millas + reembolso.		self changed.		reembolso := -1 ].	^ reembolso! !!ViajeroFrecuente methodsFor: 'verification' stamp: 'Jere 12/21/2023 16:03'!esFrecuente	^true! !!ViajeroFrecuente methodsFor: 'printing' stamp: 'Jere 12/21/2023 16:24'!toString"Metodo que llama a super toString y agrega los atributos correspondientes"	^ super toString , 'Millas: ' , millas asString! !!ViajeroFrecuente methodsFor: 'as yet unclassified' stamp: 'Jere 12/21/2023 16:14'!inicializarDesdeCliente: clienteViejo	dni := clienteViejo getDni.	apellido := clienteViejo getApellido.	ciudad := clienteViejo getCiudad.	contacto := clienteViejo getContacto.	contratos := clienteViejo getContratos.	preferencias := clienteViejo getPreferencias.	proxVencimiento := clienteViejo getProxVencimiento.	millas := 0.! !!ViajeroFrecuente methodsFor: 'initialization' stamp: 'swlaptop 12/15/2023 01:59'!inicializar: cantMillas"Metodo que inicializa las millas"	millas := cantMillas! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ViajeroFrecuente class	instanceVariableNames: ''!!ViajeroFrecuente class methodsFor: 'constructor' stamp: 'vale 7/28/2023 15:43'!crear: apell con: documento con: ciud con: telefono con: colContratos con: pref con: cantMillas	|personita|	personita:= self crear: apell con: documento con: ciud con: telefono con: colContratos con: pref.	personita inicializar: cantMillas.	^personita.! !